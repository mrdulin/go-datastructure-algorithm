// Code generated by gowsdl DO NOT EDIT.

package myservice

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

//
// Ad serving status of campaign.
//

type AdServingOptimizationStatus string

const (

	//
	// Ad serving is optimized based on CTR for the campaign.
	//
	AdServingOptimizationStatusOPTIMIZE AdServingOptimizationStatus = "OPTIMIZE"

	//
	// Ad serving is optimized based on CTR * Conversion for the campaign. If the campaign is not in
	// the conversion optimizer bidding strategy, it will default to OPTIMIZED.
	//
	AdServingOptimizationStatusCONVERSION_OPTIMIZE AdServingOptimizationStatus = "CONVERSION_OPTIMIZE"

	//
	// Ads are rotated evenly for 90 days, then optimized for clicks.
	//
	AdServingOptimizationStatusROTATE AdServingOptimizationStatus = "ROTATE"

	//
	// Show lower performing ads more evenly with higher performing ads, and do not optimize.
	//
	AdServingOptimizationStatusROTATE_INDEFINITELY AdServingOptimizationStatus = "ROTATE_INDEFINITELY"

	//
	// Ad serving optimization status is not available.
	//
	AdServingOptimizationStatusUNAVAILABLE AdServingOptimizationStatus = "UNAVAILABLE"

	//
	// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
	//
	AdServingOptimizationStatusUNKNOWN AdServingOptimizationStatus = "UNKNOWN"
)

//
// A non-mutable specialization of an Advertising Channel.
//

type AdvertisingChannelSubType string

const (

	//
	// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
	//
	AdvertisingChannelSubTypeUNKNOWN AdvertisingChannelSubType = "UNKNOWN"

	//
	// Mobile App Campaigns for Search
	//
	AdvertisingChannelSubTypeSEARCH_MOBILE_APP AdvertisingChannelSubType = "SEARCH_MOBILE_APP"

	//
	// Mobile App Campaigns for Display
	//
	AdvertisingChannelSubTypeDISPLAY_MOBILE_APP AdvertisingChannelSubType = "DISPLAY_MOBILE_APP"

	//
	// AdWords Express campaigns for search.
	//
	AdvertisingChannelSubTypeSEARCH_EXPRESS AdvertisingChannelSubType = "SEARCH_EXPRESS"

	//
	// AdWords Express campaigns for display.
	//
	AdvertisingChannelSubTypeDISPLAY_EXPRESS AdvertisingChannelSubType = "DISPLAY_EXPRESS"

	//
	// Campaigns specialized for advertising mobile app installations, that targets
	// multiple advertising channels across search, display and youtube.  Google
	// manages the keywords and ads for these campaigns.
	//
	AdvertisingChannelSubTypeUNIVERSAL_APP_CAMPAIGN AdvertisingChannelSubType = "UNIVERSAL_APP_CAMPAIGN"

	//
	// Smart display campaign
	//
	AdvertisingChannelSubTypeDISPLAY_SMART_CAMPAIGN AdvertisingChannelSubType = "DISPLAY_SMART_CAMPAIGN"

	//
	// Campaigns specialized for retail advertising, that target multiple advertising
	// channels across Search, Google Display Network, and YouTube. These campaigns
	// optimize automatically towards the retailer's business objectives.
	//
	AdvertisingChannelSubTypeSHOPPING_GOAL_OPTIMIZED_ADS AdvertisingChannelSubType = "SHOPPING_GOAL_OPTIMIZED_ADS"

	//
	// Gmail Ad Campaigns
	//
	AdvertisingChannelSubTypeDISPLAY_GMAIL_AD AdvertisingChannelSubType = "DISPLAY_GMAIL_AD"
)

//
// The channel type a campaign may target to serve on.
//

type AdvertisingChannelType string

const (

	//
	// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
	//
	AdvertisingChannelTypeUNKNOWN AdvertisingChannelType = "UNKNOWN"

	//
	// Search Network. Includes display bundled, and Search+ campaigns.
	//
	AdvertisingChannelTypeSEARCH AdvertisingChannelType = "SEARCH"

	//
	// Google Display Network only.
	//
	AdvertisingChannelTypeDISPLAY AdvertisingChannelType = "DISPLAY"

	//
	// Shopping campaigns serve on the shopping property and on google.com search
	// results.
	//
	AdvertisingChannelTypeSHOPPING AdvertisingChannelType = "SHOPPING"

	//
	// Universal app campaigns that target multiple channels across search, display,
	// youtube, etc.
	//
	AdvertisingChannelTypeMULTI_CHANNEL AdvertisingChannelType = "MULTI_CHANNEL"
)

//
// The reasons for the AdX error.
//

type AdxError_Reason string

const (

	//
	// Attempt to use non-AdX feature by AdX customer.
	//
	AdxError_ReasonUNSUPPORTED_FEATURE AdxError_Reason = "UNSUPPORTED_FEATURE"
)

//
// The single reason for the authentication failure.
//

type AuthenticationError_Reason string

const (

	//
	// Authentication of the request failed.
	//
	AuthenticationError_ReasonAUTHENTICATION_FAILED AuthenticationError_Reason = "AUTHENTICATION_FAILED"

	//
	// Client Customer Id is required if CustomerIdMode is set to CLIENT_EXTERNAL_CUSTOMER_ID.
	// Starting version V201409 ClientCustomerId will be required for all requests except
	// for {@link CustomerService#get}
	//
	AuthenticationError_ReasonCLIENT_CUSTOMER_ID_IS_REQUIRED AuthenticationError_Reason = "CLIENT_CUSTOMER_ID_IS_REQUIRED"

	//
	// Client Email is required if CustomerIdMode is set to CLIENT_EXTERNAL_EMAIL_FIELD.
	//
	AuthenticationError_ReasonCLIENT_EMAIL_REQUIRED AuthenticationError_Reason = "CLIENT_EMAIL_REQUIRED"

	//
	// Client customer Id is not a number.
	//
	AuthenticationError_ReasonCLIENT_CUSTOMER_ID_INVALID AuthenticationError_Reason = "CLIENT_CUSTOMER_ID_INVALID"

	//
	// Client customer Id is not a number.
	//
	AuthenticationError_ReasonCLIENT_EMAIL_INVALID AuthenticationError_Reason = "CLIENT_EMAIL_INVALID"

	//
	// Client email is not a valid customer email.
	//
	AuthenticationError_ReasonCLIENT_EMAIL_FAILED_TO_AUTHENTICATE AuthenticationError_Reason = "CLIENT_EMAIL_FAILED_TO_AUTHENTICATE"

	//
	// No customer found for the customer id provided in the header.
	//
	AuthenticationError_ReasonCUSTOMER_NOT_FOUND AuthenticationError_Reason = "CUSTOMER_NOT_FOUND"

	//
	// Client's Google Account is deleted.
	//
	AuthenticationError_ReasonGOOGLE_ACCOUNT_DELETED AuthenticationError_Reason = "GOOGLE_ACCOUNT_DELETED"

	//
	// Google account login token in the cookie is invalid.
	//
	AuthenticationError_ReasonGOOGLE_ACCOUNT_COOKIE_INVALID AuthenticationError_Reason = "GOOGLE_ACCOUNT_COOKIE_INVALID"

	//
	// problem occurred during Google account authentication.
	//
	AuthenticationError_ReasonFAILED_TO_AUTHENTICATE_GOOGLE_ACCOUNT AuthenticationError_Reason = "FAILED_TO_AUTHENTICATE_GOOGLE_ACCOUNT"

	//
	// The user in the google account login token does not match the UserId in the cookie.
	//
	AuthenticationError_ReasonGOOGLE_ACCOUNT_USER_AND_ADS_USER_MISMATCH AuthenticationError_Reason = "GOOGLE_ACCOUNT_USER_AND_ADS_USER_MISMATCH"

	//
	// Login cookie is required for authentication.
	//
	AuthenticationError_ReasonLOGIN_COOKIE_REQUIRED AuthenticationError_Reason = "LOGIN_COOKIE_REQUIRED"

	//
	// User in the cookie is not a valid Ads user.
	//
	AuthenticationError_ReasonNOT_ADS_USER AuthenticationError_Reason = "NOT_ADS_USER"

	//
	// Oauth token in the header is not valid.
	//
	AuthenticationError_ReasonOAUTH_TOKEN_INVALID AuthenticationError_Reason = "OAUTH_TOKEN_INVALID"

	//
	// Oauth token in the header has expired.
	//
	AuthenticationError_ReasonOAUTH_TOKEN_EXPIRED AuthenticationError_Reason = "OAUTH_TOKEN_EXPIRED"

	//
	// Oauth token in the header has been disabled.
	//
	AuthenticationError_ReasonOAUTH_TOKEN_DISABLED AuthenticationError_Reason = "OAUTH_TOKEN_DISABLED"

	//
	// Oauth token in the header has been revoked.
	//
	AuthenticationError_ReasonOAUTH_TOKEN_REVOKED AuthenticationError_Reason = "OAUTH_TOKEN_REVOKED"

	//
	// Oauth token HTTP header is malformed.
	//
	AuthenticationError_ReasonOAUTH_TOKEN_HEADER_INVALID AuthenticationError_Reason = "OAUTH_TOKEN_HEADER_INVALID"

	//
	// Login cookie is not valid.
	//
	AuthenticationError_ReasonLOGIN_COOKIE_INVALID AuthenticationError_Reason = "LOGIN_COOKIE_INVALID"

	//
	// Failed to decrypt the login cookie.
	//
	AuthenticationError_ReasonFAILED_TO_RETRIEVE_LOGIN_COOKIE AuthenticationError_Reason = "FAILED_TO_RETRIEVE_LOGIN_COOKIE"

	//
	// User Id in the header is not a valid id.
	//
	AuthenticationError_ReasonUSER_ID_INVALID AuthenticationError_Reason = "USER_ID_INVALID"
)

//
// The reasons for the authorization error.
//

type AuthorizationError_Reason string

const (

	//
	// Could not complete authorization due to an internal problem.
	//
	AuthorizationError_ReasonUNABLE_TO_AUTHORIZE AuthorizationError_Reason = "UNABLE_TO_AUTHORIZE"

	//
	// Customer has no AdWords account.
	//
	AuthorizationError_ReasonNO_ADWORDS_ACCOUNT_FOR_CUSTOMER AuthorizationError_Reason = "NO_ADWORDS_ACCOUNT_FOR_CUSTOMER"

	//
	// User doesn't have permission to access customer.
	//
	AuthorizationError_ReasonUSER_PERMISSION_DENIED AuthorizationError_Reason = "USER_PERMISSION_DENIED"

	//
	// Effective user doesn't have permission to access this customer.
	//
	AuthorizationError_ReasonEFFECTIVE_USER_PERMISSION_DENIED AuthorizationError_Reason = "EFFECTIVE_USER_PERMISSION_DENIED"

	//
	// Access denied since the customer is not active.
	//
	AuthorizationError_ReasonCUSTOMER_NOT_ACTIVE AuthorizationError_Reason = "CUSTOMER_NOT_ACTIVE"

	//
	// User has read-only permission cannot mutate.
	//
	AuthorizationError_ReasonUSER_HAS_READONLY_PERMISSION AuthorizationError_Reason = "USER_HAS_READONLY_PERMISSION"

	//
	// No customer found.
	//
	AuthorizationError_ReasonNO_CUSTOMER_FOUND AuthorizationError_Reason = "NO_CUSTOMER_FOUND"

	//
	// Developer doesn't have permission to access service.
	//
	AuthorizationError_ReasonSERVICE_ACCESS_DENIED AuthorizationError_Reason = "SERVICE_ACCESS_DENIED"

	//
	// The customer has a policy to enforce 2-Step Verification, but the user is not enrolled.
	//
	AuthorizationError_ReasonTWO_STEP_VERIFICATION_NOT_ENROLLED AuthorizationError_Reason = "TWO_STEP_VERIFICATION_NOT_ENROLLED"

	//
	// The customer has a policy to enforce enrollment in the Advanced Protection Program, but
	// the user is not enrolled.
	//
	AuthorizationError_ReasonADVANCED_PROTECTION_NOT_ENROLLED AuthorizationError_Reason = "ADVANCED_PROTECTION_NOT_ENROLLED"
)

//
// Indicate where a criterion's bid came from: criterion or the adgroup it
// belongs to.
//

type BidSource string

const (

	//
	// Effective Bid is Adgroup level bid
	//
	BidSourceADGROUP BidSource = "ADGROUP"

	//
	// Effective Bid is Keyword level bid
	//
	BidSourceCRITERION BidSource = "CRITERION"

	//
	// Effective Bid is inherited from Adgroup Bidding Strategy
	//
	BidSourceADGROUP_BIDDING_STRATEGY BidSource = "ADGROUP_BIDDING_STRATEGY"

	//
	// Effective Bid is inherited from Campaign Bidding Strategy
	//
	BidSourceCAMPAIGN_BIDDING_STRATEGY BidSource = "CAMPAIGN_BIDDING_STRATEGY"
)

type BiddingErrors_Reason string

const (

	//
	// Cannot transition to new bidding strategy.
	//
	BiddingErrors_ReasonBIDDING_STRATEGY_TRANSITION_NOT_ALLOWED BiddingErrors_Reason = "BIDDING_STRATEGY_TRANSITION_NOT_ALLOWED"

	//
	// Bidding strategy cannot be overridden by current ad group bidding strategy.
	//
	BiddingErrors_ReasonBIDDING_STRATEGY_NOT_COMPATIBLE_WITH_ADGROUP_OVERRIDES BiddingErrors_Reason = "BIDDING_STRATEGY_NOT_COMPATIBLE_WITH_ADGROUP_OVERRIDES"

	//
	// Bidding strategy cannot be overridden by current criteria bidding strategy.
	//
	BiddingErrors_ReasonBIDDING_STRATEGY_NOT_COMPATIBLE_WITH_ADGROUP_CRITERIA_OVERRIDES BiddingErrors_Reason = "BIDDING_STRATEGY_NOT_COMPATIBLE_WITH_ADGROUP_CRITERIA_OVERRIDES"

	//
	// Cannot override campaign bidding strategy.
	//
	BiddingErrors_ReasonCAMPAIGN_BIDDING_STRATEGY_CANNOT_BE_OVERRIDDEN BiddingErrors_Reason = "CAMPAIGN_BIDDING_STRATEGY_CANNOT_BE_OVERRIDDEN"

	//
	// Cannot override ad group bidding strategy.
	//
	BiddingErrors_ReasonADGROUP_BIDDING_STRATEGY_CANNOT_BE_OVERRIDDEN BiddingErrors_Reason = "ADGROUP_BIDDING_STRATEGY_CANNOT_BE_OVERRIDDEN"

	//
	// Cannot attach bidding strategy to campaign.
	//
	BiddingErrors_ReasonCANNOT_ATTACH_BIDDING_STRATEGY_TO_CAMPAIGN BiddingErrors_Reason = "CANNOT_ATTACH_BIDDING_STRATEGY_TO_CAMPAIGN"

	//
	// Cannot attach bidding strategy to ad group.
	//
	BiddingErrors_ReasonCANNOT_ATTACH_BIDDING_STRATEGY_TO_ADGROUP BiddingErrors_Reason = "CANNOT_ATTACH_BIDDING_STRATEGY_TO_ADGROUP"

	//
	// Cannot attach bidding strategy to criteria.
	//
	BiddingErrors_ReasonCANNOT_ATTACH_BIDDING_STRATEGY_TO_ADGROUP_CRITERIA BiddingErrors_Reason = "CANNOT_ATTACH_BIDDING_STRATEGY_TO_ADGROUP_CRITERIA"

	//
	// Bidding strategy is not supported or cannot be used as anonymous.
	//
	BiddingErrors_ReasonINVALID_ANONYMOUS_BIDDING_STRATEGY_TYPE BiddingErrors_Reason = "INVALID_ANONYMOUS_BIDDING_STRATEGY_TYPE"

	//
	// No bids may be set. The bid list must be null or empty.
	//
	BiddingErrors_ReasonBIDS_NOT_ALLLOWED BiddingErrors_Reason = "BIDS_NOT_ALLLOWED"

	//
	// The bid list contains two or more bids of the same type.
	//
	BiddingErrors_ReasonDUPLICATE_BIDS BiddingErrors_Reason = "DUPLICATE_BIDS"

	//
	// The bidding scheme does not match the bidding strategy type.
	//
	BiddingErrors_ReasonINVALID_BIDDING_SCHEME BiddingErrors_Reason = "INVALID_BIDDING_SCHEME"

	//
	// The type does not match the named strategy's type.
	//
	BiddingErrors_ReasonINVALID_BIDDING_STRATEGY_TYPE BiddingErrors_Reason = "INVALID_BIDDING_STRATEGY_TYPE"

	//
	// The bidding strategy type is missing.
	//
	BiddingErrors_ReasonMISSING_BIDDING_STRATEGY_TYPE BiddingErrors_Reason = "MISSING_BIDDING_STRATEGY_TYPE"

	//
	// The bid list contains a null entry.
	//
	BiddingErrors_ReasonNULL_BID BiddingErrors_Reason = "NULL_BID"

	//
	// The bid is invalid.
	//
	BiddingErrors_ReasonINVALID_BID BiddingErrors_Reason = "INVALID_BID"

	//
	// Bidding strategy is not available for the account type.
	//
	BiddingErrors_ReasonBIDDING_STRATEGY_NOT_AVAILABLE_FOR_ACCOUNT_TYPE BiddingErrors_Reason = "BIDDING_STRATEGY_NOT_AVAILABLE_FOR_ACCOUNT_TYPE"

	//
	// Conversion tracking is not enabled in the campaign that has YouTube
	// Video Builder transitions.
	//
	BiddingErrors_ReasonCONVERSION_TRACKING_NOT_ENABLED BiddingErrors_Reason = "CONVERSION_TRACKING_NOT_ENABLED"

	//
	// Not enough conversions tracked for YouTube Video Builder transitions.
	//
	BiddingErrors_ReasonNOT_ENOUGH_CONVERSIONS BiddingErrors_Reason = "NOT_ENOUGH_CONVERSIONS"

	//
	// Campaign can not be created with given bidding strategy. It can be transitioned to the
	// strategy, once eligible.
	//
	BiddingErrors_ReasonCANNOT_CREATE_CAMPAIGN_WITH_BIDDING_STRATEGY BiddingErrors_Reason = "CANNOT_CREATE_CAMPAIGN_WITH_BIDDING_STRATEGY"

	//
	// Cannot target content network only as ad group uses Page One Promoted bidding strategy.
	//
	BiddingErrors_ReasonCANNOT_TARGET_CONTENT_NETWORK_ONLY_WITH_AD_GROUP_LEVEL_POP_BIDDING_STRATEGY BiddingErrors_Reason = "CANNOT_TARGET_CONTENT_NETWORK_ONLY_WITH_AD_GROUP_LEVEL_POP_BIDDING_STRATEGY"

	//
	// Cannot target content network only as campaign uses Page One Promoted bidding strategy.
	//
	BiddingErrors_ReasonCANNOT_TARGET_CONTENT_NETWORK_ONLY_WITH_CAMPAIGN_LEVEL_POP_BIDDING_STRATEGY BiddingErrors_Reason = "CANNOT_TARGET_CONTENT_NETWORK_ONLY_WITH_CAMPAIGN_LEVEL_POP_BIDDING_STRATEGY"

	//
	// Budget Optimizer and Target Spend bidding strategies are not supported for campaigns with
	// AdSchedule targeting.
	//
	BiddingErrors_ReasonBIDDING_STRATEGY_NOT_SUPPORTED_WITH_AD_SCHEDULE BiddingErrors_Reason = "BIDDING_STRATEGY_NOT_SUPPORTED_WITH_AD_SCHEDULE"

	//
	// Pay per conversion is not available to all the customer, only few whitelisted customers
	// can use this.
	//
	BiddingErrors_ReasonPAY_PER_CONVERSION_NOT_AVAILABLE_FOR_CUSTOMER BiddingErrors_Reason = "PAY_PER_CONVERSION_NOT_AVAILABLE_FOR_CUSTOMER"

	//
	// Pay per conversion is not allowed with Target CPA.
	//
	BiddingErrors_ReasonPAY_PER_CONVERSION_NOT_ALLOWED_WITH_TARGET_CPA BiddingErrors_Reason = "PAY_PER_CONVERSION_NOT_ALLOWED_WITH_TARGET_CPA"

	//
	// Cannot set bidding strategy to Manual CPM for search network only campaigns.
	//
	BiddingErrors_ReasonBIDDING_STRATEGY_NOT_ALLOWED_FOR_SEARCH_ONLY_CAMPAIGNS BiddingErrors_Reason = "BIDDING_STRATEGY_NOT_ALLOWED_FOR_SEARCH_ONLY_CAMPAIGNS"

	//
	// The bidding strategy is not supported for use in drafts or experiments.
	//
	BiddingErrors_ReasonBIDDING_STRATEGY_NOT_SUPPORTED_IN_DRAFTS_OR_EXPERIMENTS BiddingErrors_Reason = "BIDDING_STRATEGY_NOT_SUPPORTED_IN_DRAFTS_OR_EXPERIMENTS"

	//
	// Bidding strategy type does not support product type ad group criterion.
	//
	BiddingErrors_ReasonBIDDING_STRATEGY_TYPE_DOES_NOT_SUPPORT_PRODUCT_TYPE_ADGROUP_CRITERION BiddingErrors_Reason = "BIDDING_STRATEGY_TYPE_DOES_NOT_SUPPORT_PRODUCT_TYPE_ADGROUP_CRITERION"

	//
	// Bid amount is too small.
	//
	BiddingErrors_ReasonBID_TOO_SMALL BiddingErrors_Reason = "BID_TOO_SMALL"

	//
	// Bid amount is too big.
	//
	BiddingErrors_ReasonBID_TOO_BIG BiddingErrors_Reason = "BID_TOO_BIG"

	//
	// Bid has too many fractional digit precision.
	//
	BiddingErrors_ReasonBID_TOO_MANY_FRACTIONAL_DIGITS BiddingErrors_Reason = "BID_TOO_MANY_FRACTIONAL_DIGITS"

	//
	// EnhancedCpcEnabled cannot be set on <em>portfolio</em> Target Spend strategies.
	//
	BiddingErrors_ReasonENHANCED_CPC_ENABLED_NOT_SUPPORTED_ON_PORTFOLIO_TARGET_SPEND_STRATEGY BiddingErrors_Reason = "ENHANCED_CPC_ENABLED_NOT_SUPPORTED_ON_PORTFOLIO_TARGET_SPEND_STRATEGY"

	//
	// The bidding strategy is not allowed for the universal app bidding strategy goal type.
	//
	BiddingErrors_ReasonBIDDING_STRATEGY_TYPE_NOT_ALLOWED_FOR_UNIVERSAL_APP_BIDDING_STRATEGY_GOAL_TYPE BiddingErrors_Reason = "BIDDING_STRATEGY_TYPE_NOT_ALLOWED_FOR_UNIVERSAL_APP_BIDDING_STRATEGY_GOAL_TYPE"

	BiddingErrors_ReasonUNKNOWN BiddingErrors_Reason = "UNKNOWN"
)

//
// Indicates where bidding strategy came from: campaign, adgroup or criterion.
//

type BiddingStrategySource string

const (

	//
	// Bidding strategy is defined on campaign level.
	//
	BiddingStrategySourceCAMPAIGN BiddingStrategySource = "CAMPAIGN"

	//
	// Bidding strategy is defined on adgroup level.
	//
	BiddingStrategySourceADGROUP BiddingStrategySource = "ADGROUP"

	//
	// Bidding strategy is defined on criterion level.
	//
	BiddingStrategySourceCRITERION BiddingStrategySource = "CRITERION"
)

//
// The bidding strategy type. See {@linkplain BiddingStrategyConfiguration}
// for additional information.
//

type BiddingStrategyType string

const (

	//
	// Manual click based bidding where user pays per click. See
	// {@linkplain ManualCpcBiddingScheme} for more details.
	//
	BiddingStrategyTypeMANUAL_CPC BiddingStrategyType = "MANUAL_CPC"

	//
	// Manual impression based bidding where user pays per thousand
	// impressions. See {@linkplain ManualCpmBiddingScheme} for more
	// details.
	//
	BiddingStrategyTypeMANUAL_CPM BiddingStrategyType = "MANUAL_CPM"

	//
	// Page-One Promoted is an automated bid strategy that sets max CPC bids
	// to target impressions on page one or page one promoted slots on
	// google.com. See {@linkplain PageOnePromotedBiddingScheme} for
	// more details.
	//
	BiddingStrategyTypePAGE_ONE_PROMOTED BiddingStrategyType = "PAGE_ONE_PROMOTED"

	//
	// Target Spend (Maximize Clicks) is an automated bid strategy that sets
	// your bids to help get as many clicks as possible within your budget.
	// See {@linkplain TargetSpendBiddingScheme} for more details.
	//
	BiddingStrategyTypeTARGET_SPEND BiddingStrategyType = "TARGET_SPEND"

	//
	// Target CPA is an automated bid strategy that sets bids to help get
	// as many conversions as possible at the target cost per acquisition
	// (CPA) you set. See {@linkplain TargetCpaBiddingScheme}
	// for more details.
	//
	BiddingStrategyTypeTARGET_CPA BiddingStrategyType = "TARGET_CPA"

	//
	// Target ROAS is an automated bidding strategy that helps you maximize
	// revenue while averaging a specific target return on average spend (ROAS).
	// See {@linkplain TargetRoasBiddingScheme} for more details.
	//
	BiddingStrategyTypeTARGET_ROAS BiddingStrategyType = "TARGET_ROAS"

	//
	// Maximize conversions is an automated bidding strategy that automatically sets bids to help
	// get the most conversions for your campaign while spending your budget.
	// See {@linkplain MaximizeConversionsBiddingScheme} for more details.
	//
	BiddingStrategyTypeMAXIMIZE_CONVERSIONS BiddingStrategyType = "MAXIMIZE_CONVERSIONS"

	//
	// Maximize conversion value is an automated bidding strategy that automatically sets bids to
	// maximize revenue while spending your budget.
	// See {@linkplain MaximizeConversionValueBiddingScheme} for more details.
	//
	BiddingStrategyTypeMAXIMIZE_CONVERSION_VALUE BiddingStrategyType = "MAXIMIZE_CONVERSION_VALUE"

	//
	// Target Outrank Share is an automated bidding strategy that sets bids
	// based on the target fraction of auctions where the advertiser should
	// outrank a specific competitor. See {@linkplain TargetOutrankShareBiddingScheme}
	// for more details.
	//
	BiddingStrategyTypeTARGET_OUTRANK_SHARE BiddingStrategyType = "TARGET_OUTRANK_SHARE"

	//
	// Special bidding strategy type used to reset the bidding strategy at AdGroup and
	// AdGroupCriterion.
	//
	BiddingStrategyTypeNONE BiddingStrategyType = "NONE"

	//
	// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
	//
	BiddingStrategyTypeUNKNOWN BiddingStrategyType = "UNKNOWN"
)

//
// Budget delivery methods.
//

type Budget_BudgetDeliveryMethod string

const (

	//
	// The budget server will throttle serving evenly across the entire time period.
	//
	Budget_BudgetDeliveryMethodSTANDARD Budget_BudgetDeliveryMethod = "STANDARD"

	//
	// The budget server will not throttle serving, and ads will serve as fast as possible.
	//
	Budget_BudgetDeliveryMethodACCELERATED Budget_BudgetDeliveryMethod = "ACCELERATED"

	Budget_BudgetDeliveryMethodUNKNOWN Budget_BudgetDeliveryMethod = "UNKNOWN"
)

type Budget_BudgetStatus string

const (
	Budget_BudgetStatusENABLED Budget_BudgetStatus = "ENABLED"

	Budget_BudgetStatusREMOVED Budget_BudgetStatus = "REMOVED"

	Budget_BudgetStatusUNKNOWN Budget_BudgetStatus = "UNKNOWN"
)

//
// The reasons for the budget error.
//

type BudgetError_Reason string

const (

	//
	// Budgets cannot be shared.
	//
	BudgetError_ReasonBUDGET_CANNOT_BE_EXPLICITLY_SHARED BudgetError_Reason = "BUDGET_CANNOT_BE_EXPLICITLY_SHARED"

	//
	// The requested budget no longer exists.
	//
	BudgetError_ReasonBUDGET_REMOVED BudgetError_Reason = "BUDGET_REMOVED"

	//
	// Default budget error.
	//
	BudgetError_ReasonBUDGET_ERROR BudgetError_Reason = "BUDGET_ERROR"

	//
	// The budget is associated with at least one campaign, and so the budget cannot be removed.
	//
	BudgetError_ReasonBUDGET_IN_USE BudgetError_Reason = "BUDGET_IN_USE"

	//
	// Customer is not whitelisted for this budget period.
	//
	BudgetError_ReasonBUDGET_PERIOD_NOT_AVAILABLE BudgetError_Reason = "BUDGET_PERIOD_NOT_AVAILABLE"

	//
	// Customer cannot use CampaignService to edit a shared budget.
	//
	BudgetError_ReasonCANNOT_EDIT_SHARED_BUDGET BudgetError_Reason = "CANNOT_EDIT_SHARED_BUDGET"

	//
	// This field is not mutable on implicitly shared budgets
	//
	BudgetError_ReasonCANNOT_MODIFY_FIELD_OF_IMPLICITLY_SHARED_BUDGET BudgetError_Reason = "CANNOT_MODIFY_FIELD_OF_IMPLICITLY_SHARED_BUDGET"

	//
	// Cannot change explicitly shared budgets back to implicitly shared ones.
	//
	BudgetError_ReasonCANNOT_UPDATE_BUDGET_TO_IMPLICITLY_SHARED BudgetError_Reason = "CANNOT_UPDATE_BUDGET_TO_IMPLICITLY_SHARED"

	//
	// An implicit budget without a name cannot be changed to explicitly shared budget.
	//
	BudgetError_ReasonCANNOT_UPDATE_BUDGET_TO_EXPLICITLY_SHARED_WITHOUT_NAME BudgetError_Reason = "CANNOT_UPDATE_BUDGET_TO_EXPLICITLY_SHARED_WITHOUT_NAME"

	//
	// Cannot change an implicitly shared budget to an explicitly shared one.
	//
	BudgetError_ReasonCANNOT_UPDATE_BUDGET_TO_EXPLICITLY_SHARED BudgetError_Reason = "CANNOT_UPDATE_BUDGET_TO_EXPLICITLY_SHARED"

	//
	// Only explicitly shared budgets can be used with multiple campaigns.
	//
	BudgetError_ReasonCANNOT_USE_IMPLICITLY_SHARED_BUDGET_WITH_MULTIPLE_CAMPAIGNS BudgetError_Reason = "CANNOT_USE_IMPLICITLY_SHARED_BUDGET_WITH_MULTIPLE_CAMPAIGNS"

	//
	// A budget with this name already exists.
	//
	BudgetError_ReasonDUPLICATE_NAME BudgetError_Reason = "DUPLICATE_NAME"

	//
	// A money amount was not in the expected currency.
	//
	BudgetError_ReasonMONEY_AMOUNT_IN_WRONG_CURRENCY BudgetError_Reason = "MONEY_AMOUNT_IN_WRONG_CURRENCY"

	//
	// A money amount was less than the minimum CPC for currency.
	//
	BudgetError_ReasonMONEY_AMOUNT_LESS_THAN_CURRENCY_MINIMUM_CPC BudgetError_Reason = "MONEY_AMOUNT_LESS_THAN_CURRENCY_MINIMUM_CPC"

	//
	// A money amount was greater than the maximum allowed.
	//
	BudgetError_ReasonMONEY_AMOUNT_TOO_LARGE BudgetError_Reason = "MONEY_AMOUNT_TOO_LARGE"

	//
	// A money amount was negative.
	//
	BudgetError_ReasonNEGATIVE_MONEY_AMOUNT BudgetError_Reason = "NEGATIVE_MONEY_AMOUNT"

	//
	// A money amount was not a multiple of a minimum unit.
	//
	BudgetError_ReasonNON_MULTIPLE_OF_MINIMUM_CURRENCY_UNIT BudgetError_Reason = "NON_MULTIPLE_OF_MINIMUM_CURRENCY_UNIT"
)

//
// The reasons for the target error.
//

type CampaignError_Reason string

const (

	//
	// A complete campaign cannot go back to being incomplete
	//
	CampaignError_ReasonCANNOT_GO_BACK_TO_INCOMPLETE CampaignError_Reason = "CANNOT_GO_BACK_TO_INCOMPLETE"

	//
	// Cannot target content network.
	//
	CampaignError_ReasonCANNOT_TARGET_CONTENT_NETWORK CampaignError_Reason = "CANNOT_TARGET_CONTENT_NETWORK"

	//
	// Cannot target search network.
	//
	CampaignError_ReasonCANNOT_TARGET_SEARCH_NETWORK CampaignError_Reason = "CANNOT_TARGET_SEARCH_NETWORK"

	//
	// Cannot cover search network without google search network.
	//
	CampaignError_ReasonCANNOT_TARGET_SEARCH_NETWORK_WITHOUT_GOOGLE_SEARCH CampaignError_Reason = "CANNOT_TARGET_SEARCH_NETWORK_WITHOUT_GOOGLE_SEARCH"

	//
	// Cannot target Google Search network for a CPM campaign.
	//
	CampaignError_ReasonCANNOT_TARGET_GOOGLE_SEARCH_FOR_CPM_CAMPAIGN CampaignError_Reason = "CANNOT_TARGET_GOOGLE_SEARCH_FOR_CPM_CAMPAIGN"

	//
	// Must target at least one network.
	//
	CampaignError_ReasonCAMPAIGN_MUST_TARGET_AT_LEAST_ONE_NETWORK CampaignError_Reason = "CAMPAIGN_MUST_TARGET_AT_LEAST_ONE_NETWORK"

	//
	// Only some Google partners are allowed to target partner search network.
	//
	CampaignError_ReasonCANNOT_TARGET_PARTNER_SEARCH_NETWORK CampaignError_Reason = "CANNOT_TARGET_PARTNER_SEARCH_NETWORK"

	//
	// Cannot target content network only as campaign has criteria-level bidding strategy.
	//
	CampaignError_ReasonCANNOT_TARGET_CONTENT_NETWORK_ONLY_WITH_CRITERIA_LEVEL_BIDDING_STRATEGY CampaignError_Reason = "CANNOT_TARGET_CONTENT_NETWORK_ONLY_WITH_CRITERIA_LEVEL_BIDDING_STRATEGY"

	//
	// Cannot modify the start or end date such that the campaign duration would not contain the
	// durations of all runnable trials.
	//
	CampaignError_ReasonCAMPAIGN_DURATION_MUST_CONTAIN_ALL_RUNNABLE_TRIALS CampaignError_Reason = "CAMPAIGN_DURATION_MUST_CONTAIN_ALL_RUNNABLE_TRIALS"

	//
	// Cannot modify dates, budget or campaign name of a trial campaign.
	//
	CampaignError_ReasonCANNOT_MODIFY_FOR_TRIAL_CAMPAIGN CampaignError_Reason = "CANNOT_MODIFY_FOR_TRIAL_CAMPAIGN"

	//
	// Trying to modify the name of an active or paused campaign, where the name is already
	// assigned to another active or paused campaign.
	//
	CampaignError_ReasonDUPLICATE_CAMPAIGN_NAME CampaignError_Reason = "DUPLICATE_CAMPAIGN_NAME"

	//
	// Two fields are in conflicting modes.
	//
	CampaignError_ReasonINCOMPATIBLE_CAMPAIGN_FIELD CampaignError_Reason = "INCOMPATIBLE_CAMPAIGN_FIELD"

	//
	// Campaign name cannot be used.
	//
	CampaignError_ReasonINVALID_CAMPAIGN_NAME CampaignError_Reason = "INVALID_CAMPAIGN_NAME"

	//
	// Given status is invalid.
	//
	CampaignError_ReasonINVALID_AD_SERVING_OPTIMIZATION_STATUS CampaignError_Reason = "INVALID_AD_SERVING_OPTIMIZATION_STATUS"

	//
	// Error in the campaign level tracking url.
	//
	CampaignError_ReasonINVALID_TRACKING_URL CampaignError_Reason = "INVALID_TRACKING_URL"

	//
	// Cannot set both tracking url template and tracking setting. An user has to clear legacy
	// tracking setting in order to add tracking url template.
	//
	CampaignError_ReasonCANNOT_SET_BOTH_TRACKING_URL_TEMPLATE_AND_TRACKING_SETTING CampaignError_Reason = "CANNOT_SET_BOTH_TRACKING_URL_TEMPLATE_AND_TRACKING_SETTING"

	//
	// The maximum number of impressions for Frequency Cap should be an integer greater than 0.
	//
	CampaignError_ReasonMAX_IMPRESSIONS_NOT_IN_RANGE CampaignError_Reason = "MAX_IMPRESSIONS_NOT_IN_RANGE"

	//
	// Only the Day, Week and Month time units are supported.
	//
	CampaignError_ReasonTIME_UNIT_NOT_SUPPORTED CampaignError_Reason = "TIME_UNIT_NOT_SUPPORTED"

	//
	// Operation not allowed on a campaign whose serving status has ended
	//
	CampaignError_ReasonINVALID_OPERATION_IF_SERVING_STATUS_HAS_ENDED CampaignError_Reason = "INVALID_OPERATION_IF_SERVING_STATUS_HAS_ENDED"

	//
	// This budget is exclusively linked to a Campaign that is using @link{Experiment}s
	// so it cannot be shared.
	//
	CampaignError_ReasonBUDGET_CANNOT_BE_SHARED CampaignError_Reason = "BUDGET_CANNOT_BE_SHARED"

	//
	// Campaigns using @link{Experiment}s cannot use a shared budget.
	//
	CampaignError_ReasonCAMPAIGN_CANNOT_USE_SHARED_BUDGET CampaignError_Reason = "CAMPAIGN_CANNOT_USE_SHARED_BUDGET"

	//
	// A different budget cannot be assigned to a campaign when there are running or scheduled
	// trials.
	//
	CampaignError_ReasonCANNOT_CHANGE_BUDGET_ON_CAMPAIGN_WITH_TRIALS CampaignError_Reason = "CANNOT_CHANGE_BUDGET_ON_CAMPAIGN_WITH_TRIALS"

	//
	// No link found between the campaign and the label.
	//
	CampaignError_ReasonCAMPAIGN_LABEL_DOES_NOT_EXIST CampaignError_Reason = "CAMPAIGN_LABEL_DOES_NOT_EXIST"

	//
	// The label has already been attached to the campaign.
	//
	CampaignError_ReasonCAMPAIGN_LABEL_ALREADY_EXISTS CampaignError_Reason = "CAMPAIGN_LABEL_ALREADY_EXISTS"

	//
	// A ShoppingSetting was not found when creating a shopping campaign.
	//
	CampaignError_ReasonMISSING_SHOPPING_SETTING CampaignError_Reason = "MISSING_SHOPPING_SETTING"

	//
	// The country in shopping setting is not an allowed country.
	//
	CampaignError_ReasonINVALID_SHOPPING_SALES_COUNTRY CampaignError_Reason = "INVALID_SHOPPING_SALES_COUNTRY"

	//
	// A Campaign with channel sub type UNIVERSAL_APP_CAMPAIGN must have a
	// UniversalAppCampaignSetting specified.
	//
	CampaignError_ReasonMISSING_UNIVERSAL_APP_CAMPAIGN_SETTING CampaignError_Reason = "MISSING_UNIVERSAL_APP_CAMPAIGN_SETTING"

	//
	// The requested channel type is not available according to the customer's account setting.
	//
	CampaignError_ReasonADVERTISING_CHANNEL_TYPE_NOT_AVAILABLE_FOR_ACCOUNT_TYPE CampaignError_Reason = "ADVERTISING_CHANNEL_TYPE_NOT_AVAILABLE_FOR_ACCOUNT_TYPE"

	//
	// The AdvertisingChannelSubType is not a valid subtype of the primary channel type.
	//
	CampaignError_ReasonINVALID_ADVERTISING_CHANNEL_SUB_TYPE CampaignError_Reason = "INVALID_ADVERTISING_CHANNEL_SUB_TYPE"

	//
	// A campaign cannot use a shared budget and be a part of a campaign group.
	//
	CampaignError_ReasonCAMPAIGN_CANNOT_USE_SHARED_BUDGET_WHILE_PART_OF_CAMPAIGN_GROUP CampaignError_Reason = "CAMPAIGN_CANNOT_USE_SHARED_BUDGET_WHILE_PART_OF_CAMPAIGN_GROUP"

	//
	// At least one conversion must be selected.
	//
	CampaignError_ReasonAT_LEAST_ONE_CONVERSION_MUST_BE_SELECTED CampaignError_Reason = "AT_LEAST_ONE_CONVERSION_MUST_BE_SELECTED"

	//
	// Setting ad rotation mode for a campaign is not allowed.
	// Ad rotation mode at campaign is deprecated.
	//
	CampaignError_ReasonCANNOT_SET_AD_ROTATION_MODE CampaignError_Reason = "CANNOT_SET_AD_ROTATION_MODE"

	//
	// Default error
	// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
	//
	CampaignError_ReasonUNKNOWN CampaignError_Reason = "UNKNOWN"
)

//
// Campaign status.
//

type CampaignStatus string

const (

	//
	// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
	//
	CampaignStatusUNKNOWN CampaignStatus = "UNKNOWN"

	//
	// Campaign is currently serving ads depending on budget information.
	//
	CampaignStatusENABLED CampaignStatus = "ENABLED"

	//
	// Campaign has been paused by the user.
	//
	CampaignStatusPAUSED CampaignStatus = "PAUSED"

	//
	// Campaign has been removed.
	//
	CampaignStatusREMOVED CampaignStatus = "REMOVED"
)

//
// This enum is used to indicate if this campaign is a normal campaign, a draft
// campaign, or a trial campaign.
//

type CampaignTrialType string

const (

	//
	// Invalid type. Should not be used except for detecting values that are incorrect,
	// or values that are not yet known to the user.
	// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
	//
	CampaignTrialTypeUNKNOWN CampaignTrialType = "UNKNOWN"

	//
	// This is a regular campaign created by the advertiser.
	//
	CampaignTrialTypeBASE CampaignTrialType = "BASE"

	//
	// This is a draft version of a campaign that is part of a CampaignDraft or a
	// customer-level Draft. It has some modifications from a base campaign, but it
	// does not serve or accrue stats.
	//
	CampaignTrialTypeDRAFT CampaignTrialType = "DRAFT"

	//
	// This is a trial version of a campaign. It has some modifications from a base
	// campaign, and a percentage of traffic is being diverted from the BASE campaign
	// to this trial campaign.
	//
	CampaignTrialTypeTRIAL CampaignTrialType = "TRIAL"
)

//
// Enums for the various reasons an error can be thrown as a result of
// ClientTerms violation.
//

type ClientTermsError_Reason string

const (

	//
	// Customer has not agreed to the latest AdWords Terms & Conditions
	//
	ClientTermsError_ReasonINCOMPLETE_SIGNUP_CURRENT_ADWORDS_TNC_NOT_AGREED ClientTermsError_Reason = "INCOMPLETE_SIGNUP_CURRENT_ADWORDS_TNC_NOT_AGREED"
)

type ConversionOptimizerEligibility_RejectionReason string

const (

	//
	// Campaign is not active
	//
	ConversionOptimizerEligibility_RejectionReasonCAMPAIGN_IS_NOT_ACTIVE ConversionOptimizerEligibility_RejectionReason = "CAMPAIGN_IS_NOT_ACTIVE"

	//
	// Conversion optimizer is available to only Manual CPC campaign
	//
	ConversionOptimizerEligibility_RejectionReasonNOT_CPC_CAMPAIGN ConversionOptimizerEligibility_RejectionReason = "NOT_CPC_CAMPAIGN"

	//
	// Conversion tracking is not enabled for the Campaign
	//
	ConversionOptimizerEligibility_RejectionReasonCONVERSION_TRACKING_NOT_ENABLED ConversionOptimizerEligibility_RejectionReason = "CONVERSION_TRACKING_NOT_ENABLED"

	//
	// The campaign does not meet the requirement to have a sufficient count
	// of conversions.
	//
	ConversionOptimizerEligibility_RejectionReasonNOT_ENOUGH_CONVERSIONS ConversionOptimizerEligibility_RejectionReason = "NOT_ENOUGH_CONVERSIONS"

	ConversionOptimizerEligibility_RejectionReasonUNKNOWN ConversionOptimizerEligibility_RejectionReason = "UNKNOWN"
)

//
// The list of groupings of criteria types.
//

type CriterionTypeGroup string

const (

	//
	// Criteria for targeting keywords. e.g. 'mars cruise'
	// KEYWORD may be used as a content bid dimension. Keywords are always a targeting dimension,
	// so may not be set as a target "ALL" dimension with {@link TargetRestriction}.
	//
	CriterionTypeGroupKEYWORD CriterionTypeGroup = "KEYWORD"

	//
	// Criteria for targeting lists of users.  Lists may represent users with particular
	// interests, or they may represent users who have interacted with an advertiser's site in
	// particular ways.
	//
	CriterionTypeGroupUSER_INTEREST_AND_LIST CriterionTypeGroup = "USER_INTEREST_AND_LIST"

	//
	// Criteria for targeting similar categories of placements, e.g. 'category::Animals>Pets'
	// Used only for content network targeting.
	//
	CriterionTypeGroupVERTICAL CriterionTypeGroup = "VERTICAL"

	//
	// Criteria for targeting gender.
	//
	CriterionTypeGroupGENDER CriterionTypeGroup = "GENDER"

	//
	// Criteria for targeting age ranges.
	//
	CriterionTypeGroupAGE_RANGE CriterionTypeGroup = "AGE_RANGE"

	//
	// Criteria for targeting placements. aka Website. e.g. 'www.flowers4sale.com'
	// This group also includes mobile applications and mobile app categories.
	//
	CriterionTypeGroupPLACEMENT CriterionTypeGroup = "PLACEMENT"

	//
	// Criteria for parental status targeting.
	//
	CriterionTypeGroupPARENT CriterionTypeGroup = "PARENT"

	//
	// Criteria for income range targeting.
	//
	CriterionTypeGroupINCOME_RANGE CriterionTypeGroup = "INCOME_RANGE"

	//
	// Special criteria type group used to reset the existing value of AdGroup's
	// contentBidCriterionTypeGroup.
	//
	CriterionTypeGroupNONE CriterionTypeGroup = "NONE"

	//
	// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
	//
	CriterionTypeGroupUNKNOWN CriterionTypeGroup = "UNKNOWN"
)

//
// The reasons for the database error.
//

type DatabaseError_Reason string

const (

	//
	// A concurrency problem occurred as two threads were attempting to modify same object.
	//
	DatabaseError_ReasonCONCURRENT_MODIFICATION DatabaseError_Reason = "CONCURRENT_MODIFICATION"

	//
	// The permission was denied to access an object.
	//
	DatabaseError_ReasonPERMISSION_DENIED DatabaseError_Reason = "PERMISSION_DENIED"

	//
	// The user's access to an object has been prohibited.
	//
	DatabaseError_ReasonACCESS_PROHIBITED DatabaseError_Reason = "ACCESS_PROHIBITED"

	//
	// Requested campaign belongs to a product that is not supported by the api.
	//
	DatabaseError_ReasonCAMPAIGN_PRODUCT_NOT_SUPPORTED DatabaseError_Reason = "CAMPAIGN_PRODUCT_NOT_SUPPORTED"

	//
	// a duplicate key was detected upon insertion
	//
	DatabaseError_ReasonDUPLICATE_KEY DatabaseError_Reason = "DUPLICATE_KEY"

	//
	// a database error has occurred
	//
	DatabaseError_ReasonDATABASE_ERROR DatabaseError_Reason = "DATABASE_ERROR"

	//
	// an unknown error has occurred
	//
	DatabaseError_ReasonUNKNOWN DatabaseError_Reason = "UNKNOWN"
)

//
// The reasons for the target error.
//

type DateError_Reason string

const (

	//
	// Given field values do not correspond to a valid date.
	//
	DateError_ReasonINVALID_FIELD_VALUES_IN_DATE DateError_Reason = "INVALID_FIELD_VALUES_IN_DATE"

	//
	// Given field values do not correspond to a valid date time.
	//
	DateError_ReasonINVALID_FIELD_VALUES_IN_DATE_TIME DateError_Reason = "INVALID_FIELD_VALUES_IN_DATE_TIME"

	//
	// The string date's format should be yyyymmdd.
	//
	DateError_ReasonINVALID_STRING_DATE DateError_Reason = "INVALID_STRING_DATE"

	//
	// The string date range's format should be yyyymmdd yyyymmdd.
	//
	DateError_ReasonINVALID_STRING_DATE_RANGE DateError_Reason = "INVALID_STRING_DATE_RANGE"

	//
	// The string date time's format should be yyyymmdd hhmmss [tz].
	//
	DateError_ReasonINVALID_STRING_DATE_TIME DateError_Reason = "INVALID_STRING_DATE_TIME"

	//
	// Date is before allowed minimum.
	//
	DateError_ReasonEARLIER_THAN_MINIMUM_DATE DateError_Reason = "EARLIER_THAN_MINIMUM_DATE"

	//
	// Date is after allowed maximum.
	//
	DateError_ReasonLATER_THAN_MAXIMUM_DATE DateError_Reason = "LATER_THAN_MAXIMUM_DATE"

	//
	// Date range bounds are not in order.
	//
	DateError_ReasonDATE_RANGE_MINIMUM_DATE_LATER_THAN_MAXIMUM_DATE DateError_Reason = "DATE_RANGE_MINIMUM_DATE_LATER_THAN_MAXIMUM_DATE"

	//
	// Both dates in range are null.
	//
	DateError_ReasonDATE_RANGE_MINIMUM_AND_MAXIMUM_DATES_BOTH_NULL DateError_Reason = "DATE_RANGE_MINIMUM_AND_MAXIMUM_DATES_BOTH_NULL"
)

//
// The reasons for the date range error.
//

type DateRangeError_Reason string

const (
	DateRangeError_ReasonDATE_RANGE_ERROR DateRangeError_Reason = "DATE_RANGE_ERROR"

	//
	// Invalid date.
	//
	DateRangeError_ReasonINVALID_DATE DateRangeError_Reason = "INVALID_DATE"

	//
	// The start date was after the end date.
	//
	DateRangeError_ReasonSTART_DATE_AFTER_END_DATE DateRangeError_Reason = "START_DATE_AFTER_END_DATE"

	//
	// Cannot set date to past time
	//
	DateRangeError_ReasonCANNOT_SET_DATE_TO_PAST DateRangeError_Reason = "CANNOT_SET_DATE_TO_PAST"

	//
	// A date was used that is past the system "last" date.
	//
	DateRangeError_ReasonAFTER_MAXIMUM_ALLOWABLE_DATE DateRangeError_Reason = "AFTER_MAXIMUM_ALLOWABLE_DATE"

	//
	// Trying to change start date on a campaign that has started.
	//
	DateRangeError_ReasonCANNOT_MODIFY_START_DATE_IF_ALREADY_STARTED DateRangeError_Reason = "CANNOT_MODIFY_START_DATE_IF_ALREADY_STARTED"
)

//
// The reasons for the validation error.
//

type DistinctError_Reason string

const (
	DistinctError_ReasonDUPLICATE_ELEMENT DistinctError_Reason = "DUPLICATE_ELEMENT"

	DistinctError_ReasonDUPLICATE_TYPE DistinctError_Reason = "DUPLICATE_TYPE"
)

type EntityAccessDenied_Reason string

const (

	//
	// User did not have read access.
	//
	EntityAccessDenied_ReasonREAD_ACCESS_DENIED EntityAccessDenied_Reason = "READ_ACCESS_DENIED"

	//
	// User did not have write access.
	//
	EntityAccessDenied_ReasonWRITE_ACCESS_DENIED EntityAccessDenied_Reason = "WRITE_ACCESS_DENIED"
)

//
// Limits at various levels of the account.
//

type EntityCountLimitExceeded_Reason string

const (

	//
	// Indicates that this request would exceed the number of allowed entities for the AdWords
	// account. The exact entity type and limit being checked can be inferred from
	// {@link #accountLimitType}.
	//
	EntityCountLimitExceeded_ReasonACCOUNT_LIMIT EntityCountLimitExceeded_Reason = "ACCOUNT_LIMIT"

	//
	// Indicates that this request would exceed the number of allowed entities in a Campaign.
	// The exact entity type and limit being checked can be inferred from
	// {@link #accountLimitType}, and the numeric id of the Campaign involved is given by
	// {@link #enclosingId}.
	//
	EntityCountLimitExceeded_ReasonCAMPAIGN_LIMIT EntityCountLimitExceeded_Reason = "CAMPAIGN_LIMIT"

	//
	// Indicates that this request would exceed the number of allowed entities in
	// an ad group.  The exact entity type and limit being checked can be
	// inferred from {@link #accountLimitType}, and the numeric id of the ad group
	// involved is given by {@link #enclosingId}.
	//
	EntityCountLimitExceeded_ReasonADGROUP_LIMIT EntityCountLimitExceeded_Reason = "ADGROUP_LIMIT"

	//
	// Indicates that this request would exceed the number of allowed entities in an ad group ad.
	// The exact entity type and limit being checked can be inferred from {@link #accountLimitType},
	// and the {@link #enclosingId} contains the ad group id followed by the ad id, separated by a
	// single comma (,).
	//
	EntityCountLimitExceeded_ReasonAD_GROUP_AD_LIMIT EntityCountLimitExceeded_Reason = "AD_GROUP_AD_LIMIT"

	//
	// Indicates that this request would exceed the number of allowed entities in an ad group
	// criterion.  The exact entity type and limit being checked can be inferred from
	// {@link #accountLimitType}, and the {@link #enclosingId} contains the ad group id followed by
	// the criterion id, separated by a single comma (,).
	//
	EntityCountLimitExceeded_ReasonAD_GROUP_CRITERION_LIMIT EntityCountLimitExceeded_Reason = "AD_GROUP_CRITERION_LIMIT"

	//
	// Indicates that this request would exceed the number of allowed entities in
	// this shared set.  The exact entity type and limit being checked can be
	// inferred from {@link #accountLimitType}, and the numeric id of the shared
	// set involved is given by {@link #enclosingId}.
	//
	EntityCountLimitExceeded_ReasonSHARED_SET_LIMIT EntityCountLimitExceeded_Reason = "SHARED_SET_LIMIT"

	//
	// Exceeds a limit related to a matching function.
	//
	EntityCountLimitExceeded_ReasonMATCHING_FUNCTION_LIMIT EntityCountLimitExceeded_Reason = "MATCHING_FUNCTION_LIMIT"

	//
	// Specific limit that has been exceeded is unknown (the client may be of an
	// older version than the server).
	//
	EntityCountLimitExceeded_ReasonUNKNOWN EntityCountLimitExceeded_Reason = "UNKNOWN"
)

type EntityNotFound_Reason string

const (

	//
	// The specified id refered to an entity which either doesn't exist or is not accessible to the
	// customer. e.g. campaign belongs to another customer.
	//
	EntityNotFound_ReasonINVALID_ID EntityNotFound_Reason = "INVALID_ID"
)

//
// The reason for the error.
//

type ForwardCompatibilityError_Reason string

const (

	//
	// Invalid value specified for a key in the forward compatibility map.
	//
	ForwardCompatibilityError_ReasonINVALID_FORWARD_COMPATIBILITY_MAP_VALUE ForwardCompatibilityError_Reason = "INVALID_FORWARD_COMPATIBILITY_MAP_VALUE"

	ForwardCompatibilityError_ReasonUNKNOWN ForwardCompatibilityError_Reason = "UNKNOWN"
)

//
// The various signals a negative location target may use.
//

type GeoTargetTypeSetting_NegativeGeoTargetType string

const (

	//
	// Specifies that a user is excluded from seeing the ad if they are in, or show interest in,
	// advertiser's targeted locations.
	//
	GeoTargetTypeSetting_NegativeGeoTargetTypeDONT_CARE GeoTargetTypeSetting_NegativeGeoTargetType = "DONT_CARE"

	//
	// Specifies that a user is excluded from seeing the ad if they are in advertiser's targeted
	// locations.
	//
	GeoTargetTypeSetting_NegativeGeoTargetTypeLOCATION_OF_PRESENCE GeoTargetTypeSetting_NegativeGeoTargetType = "LOCATION_OF_PRESENCE"
)

//
// The various signals a positive location target may use.
//

type GeoTargetTypeSetting_PositiveGeoTargetType string

const (

	//
	// Specifies that the ad is triggered if the user is in, or shows interest in, advertiser's
	// targeted locations.
	//
	GeoTargetTypeSetting_PositiveGeoTargetTypeDONT_CARE GeoTargetTypeSetting_PositiveGeoTargetType = "DONT_CARE"

	//
	// Specifies that the ad is triggered if the user searches for advertiser's targeted locations.
	//
	GeoTargetTypeSetting_PositiveGeoTargetTypeAREA_OF_INTEREST GeoTargetTypeSetting_PositiveGeoTargetType = "AREA_OF_INTEREST"

	//
	// Specifies that the ad is triggered if the user is in or regularly in advertiser's targeted
	// locations.
	//
	GeoTargetTypeSetting_PositiveGeoTargetTypeLOCATION_OF_PRESENCE GeoTargetTypeSetting_PositiveGeoTargetType = "LOCATION_OF_PRESENCE"
)

//
// The reasons for the target error.
//

type IdError_Reason string

const (

	//
	// Id not found
	//
	IdError_ReasonNOT_FOUND IdError_Reason = "NOT_FOUND"
)

//
// The single reason for the internal API error.
//

type InternalApiError_Reason string

const (

	//
	// API encountered an unexpected internal error.
	//
	InternalApiError_ReasonUNEXPECTED_INTERNAL_API_ERROR InternalApiError_Reason = "UNEXPECTED_INTERNAL_API_ERROR"

	//
	// A temporary error occurred during the request. Please retry.
	//
	InternalApiError_ReasonTRANSIENT_ERROR InternalApiError_Reason = "TRANSIENT_ERROR"

	//
	// The cause of the error is not known or only defined in newer versions.
	//
	InternalApiError_ReasonUNKNOWN InternalApiError_Reason = "UNKNOWN"

	//
	// The API is currently unavailable for a planned downtime.
	//
	InternalApiError_ReasonDOWNTIME InternalApiError_Reason = "DOWNTIME"

	//
	// Mutate succeeded but server was unable to build response. Client should not retry mutate.
	//
	InternalApiError_ReasonERROR_GENERATING_RESPONSE InternalApiError_Reason = "ERROR_GENERATING_RESPONSE"
)

type Label_Status string

const (

	//
	// The label is enabled.
	//
	Label_StatusENABLED Label_Status = "ENABLED"

	//
	// The label has been removed.
	//
	Label_StatusREMOVED Label_Status = "REMOVED"

	//
	// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
	//
	Label_StatusUNKNOWN Label_Status = "UNKNOWN"
)

//
// The level on which the cap is to be applied.
//

type Level string

const (

	//
	// The cap is applied at the creative level.
	//
	LevelCREATIVE Level = "CREATIVE"

	//
	// The cap is applied at the ad group level.
	//
	LevelADGROUP Level = "ADGROUP"

	//
	// The cap is applied at the campaign level.
	//
	LevelCAMPAIGN Level = "CAMPAIGN"

	//
	// This value cannot be set by the user and sent to the AdWords API servers,
	// as it would generate a RejectedError.
	// It can only be received by the user from the AdWords API servers and it
	// means that a new value available in a newer API release version is not
	// known in the current API release version.
	// If the user encounters this value, it means an upgrade is required
	// in order to take advantage of the latest AdWords API functionality.
	// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
	//
	LevelUNKNOWN Level = "UNKNOWN"
)

//
// The reason for the error.
//

type ListError_Reason string

const (

	//
	// A request attempted to clear a list that does not support being cleared.
	//
	ListError_ReasonCLEAR_UNSUPPORTED ListError_Reason = "CLEAR_UNSUPPORTED"

	//
	// The operator is invalid for the list or list element the operator was applied to.
	//
	ListError_ReasonINVALID_OPERATOR ListError_Reason = "INVALID_OPERATOR"

	//
	// An UPDATE or REMOVE was requested for a list element that does not exist.
	//
	ListError_ReasonINVALID_ELEMENT ListError_Reason = "INVALID_ELEMENT"

	//
	// The operator list has different a size compared to the element list.
	//
	ListError_ReasonLIST_LENGTH_MISMATCH ListError_Reason = "LIST_LENGTH_MISMATCH"

	//
	// Duplicate elements inside list.
	//
	ListError_ReasonDUPLICATE_ELEMENT ListError_Reason = "DUPLICATE_ELEMENT"

	//
	// The API operator of the mutate being performed on the entity containing this list is not
	// supported.
	//
	ListError_ReasonMUTATE_UNSUPPORTED ListError_Reason = "MUTATE_UNSUPPORTED"

	ListError_ReasonUNKNOWN ListError_Reason = "UNKNOWN"
)

//
// Specifies the intended behavior for a list element.
//

type ListOperations_ListOperator string

const (

	//
	// Adds to a list, or overrides an existing element if it exists.
	//
	ListOperations_ListOperatorPUT ListOperations_ListOperator = "PUT"

	//
	// Removes this element from the list.
	//
	ListOperations_ListOperatorREMOVE ListOperations_ListOperator = "REMOVE"

	//
	// Updates this element with the existing behavior of null fields inside the list element being
	// a no-op. If the element doesn't exist it is added.
	//
	ListOperations_ListOperatorUPDATE ListOperations_ListOperator = "UPDATE"

	//
	// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
	//
	ListOperations_ListOperatorUNKNOWN ListOperations_ListOperator = "UNKNOWN"
)

//
// The Vendor, i.e. application store that distributes mobile applications.
//

type MobileApplicationVendor string

const (
	MobileApplicationVendorVENDOR_UNKNOWN MobileApplicationVendor = "VENDOR_UNKNOWN"

	//
	// Mobile application vendor for apple app store.
	//
	MobileApplicationVendorVENDOR_APPLE_APP_STORE MobileApplicationVendor = "VENDOR_APPLE_APP_STORE"

	//
	// Mobile application vendor for google market.
	//
	MobileApplicationVendorVENDOR_GOOGLE_MARKET MobileApplicationVendor = "VENDOR_GOOGLE_MARKET"
)

type NewEntityCreationError_Reason string

const (

	//
	// Do not set the id field while creating new entities.
	//
	NewEntityCreationError_ReasonCANNOT_SET_ID_FOR_ADD NewEntityCreationError_Reason = "CANNOT_SET_ID_FOR_ADD"

	//
	// Creating more than one entity with the same temp ID is not allowed.
	//
	NewEntityCreationError_ReasonDUPLICATE_TEMP_IDS NewEntityCreationError_Reason = "DUPLICATE_TEMP_IDS"

	//
	// Parent object with specified temp id failed validation, so no deep
	// validation will be done for this child entity.
	//
	NewEntityCreationError_ReasonTEMP_ID_ENTITY_HAD_ERRORS NewEntityCreationError_Reason = "TEMP_ID_ENTITY_HAD_ERRORS"
)

//
// The reasons for the validation error.
//

type NotEmptyError_Reason string

const (
	NotEmptyError_ReasonEMPTY_LIST NotEmptyError_Reason = "EMPTY_LIST"
)

//
// The reasons for the validation error.
//

type NullError_Reason string

const (

	//
	// Specified list/container must not contain any null elements
	//
	NullError_ReasonNULL_CONTENT NullError_Reason = "NULL_CONTENT"
)

//
// The reasons for the operation access error.
//

type OperationAccessDenied_Reason string

const (

	//
	// Unauthorized invocation of a service's method (get, mutate, etc.)
	//
	OperationAccessDenied_ReasonACTION_NOT_PERMITTED OperationAccessDenied_Reason = "ACTION_NOT_PERMITTED"

	//
	// Unauthorized ADD operation in invoking a service's mutate method.
	//
	OperationAccessDenied_ReasonADD_OPERATION_NOT_PERMITTED OperationAccessDenied_Reason = "ADD_OPERATION_NOT_PERMITTED"

	//
	// Unauthorized REMOVE operation in invoking a service's mutate method.
	//
	OperationAccessDenied_ReasonREMOVE_OPERATION_NOT_PERMITTED OperationAccessDenied_Reason = "REMOVE_OPERATION_NOT_PERMITTED"

	//
	// Unauthorized SET operation in invoking a service's mutate method.
	//
	OperationAccessDenied_ReasonSET_OPERATION_NOT_PERMITTED OperationAccessDenied_Reason = "SET_OPERATION_NOT_PERMITTED"

	//
	// A mutate action is not allowed on this campaign, from this client.
	//
	OperationAccessDenied_ReasonMUTATE_ACTION_NOT_PERMITTED_FOR_CLIENT OperationAccessDenied_Reason = "MUTATE_ACTION_NOT_PERMITTED_FOR_CLIENT"

	//
	// This operation is not permitted on this campaign type
	//
	OperationAccessDenied_ReasonOPERATION_NOT_PERMITTED_FOR_CAMPAIGN_TYPE OperationAccessDenied_Reason = "OPERATION_NOT_PERMITTED_FOR_CAMPAIGN_TYPE"

	//
	// An ADD operation may not set status to REMOVED.
	//
	OperationAccessDenied_ReasonADD_AS_REMOVED_NOT_PERMITTED OperationAccessDenied_Reason = "ADD_AS_REMOVED_NOT_PERMITTED"

	//
	// This operation is not allowed because the campaign or adgroup is removed.
	//
	OperationAccessDenied_ReasonOPERATION_NOT_PERMITTED_FOR_REMOVED_ENTITY OperationAccessDenied_Reason = "OPERATION_NOT_PERMITTED_FOR_REMOVED_ENTITY"

	//
	// This operation is not permitted on this ad group type.
	//
	OperationAccessDenied_ReasonOPERATION_NOT_PERMITTED_FOR_AD_GROUP_TYPE OperationAccessDenied_Reason = "OPERATION_NOT_PERMITTED_FOR_AD_GROUP_TYPE"

	//
	// The reason the invoked method or operation is prohibited is not known
	// (the client may be of an older version than the server).
	//
	OperationAccessDenied_ReasonUNKNOWN OperationAccessDenied_Reason = "UNKNOWN"
)

//
// This represents an operator that may be presented to an adsapi service.
//

type Operator string

const (

	//
	// The ADD operator.
	//
	OperatorADD Operator = "ADD"

	//
	// The REMOVE operator.
	//
	OperatorREMOVE Operator = "REMOVE"

	//
	// The SET operator (used for updates).
	//
	OperatorSET Operator = "SET"
)

//
// The reasons for the validation error.
//

type OperatorError_Reason string

const (
	OperatorError_ReasonOPERATOR_NOT_SUPPORTED OperatorError_Reason = "OPERATOR_NOT_SUPPORTED"
)

type PageOnePromotedBiddingScheme_StrategyGoal string

const (

	//
	// First page on google.com.
	//
	PageOnePromotedBiddingScheme_StrategyGoalPAGE_ONE PageOnePromotedBiddingScheme_StrategyGoal = "PAGE_ONE"

	//
	// Top slots of the first page on google.com.
	//
	PageOnePromotedBiddingScheme_StrategyGoalPAGE_ONE_PROMOTED PageOnePromotedBiddingScheme_StrategyGoal = "PAGE_ONE_PROMOTED"
)

//
// Subtype of PolicyTopicConstraint.
//

type PolicyTopicConstraint_PolicyTopicConstraintType string

const (
	PolicyTopicConstraint_PolicyTopicConstraintTypeUNKNOWN PolicyTopicConstraint_PolicyTopicConstraintType = "UNKNOWN"

	PolicyTopicConstraint_PolicyTopicConstraintTypeCOUNTRY PolicyTopicConstraint_PolicyTopicConstraintType = "COUNTRY"

	PolicyTopicConstraint_PolicyTopicConstraintTypeRESELLER PolicyTopicConstraint_PolicyTopicConstraintType = "RESELLER"

	PolicyTopicConstraint_PolicyTopicConstraintTypeCERTIFICATE_MISSING_IN_COUNTRY PolicyTopicConstraint_PolicyTopicConstraintType = "CERTIFICATE_MISSING_IN_COUNTRY"

	PolicyTopicConstraint_PolicyTopicConstraintTypeCERTIFICATE_DOMAIN_MISMATCH_IN_COUNTRY PolicyTopicConstraint_PolicyTopicConstraintType = "CERTIFICATE_DOMAIN_MISMATCH_IN_COUNTRY"

	PolicyTopicConstraint_PolicyTopicConstraintTypeCERTIFICATE_MISSING PolicyTopicConstraint_PolicyTopicConstraintType = "CERTIFICATE_MISSING"

	PolicyTopicConstraint_PolicyTopicConstraintTypeCERTIFICATE_DOMAIN_MISMATCH PolicyTopicConstraint_PolicyTopicConstraintType = "CERTIFICATE_DOMAIN_MISMATCH"
)

//
// The summarized nature of a policy entry.
//

type PolicyTopicEntryType string

const (

	//
	// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
	//
	PolicyTopicEntryTypeUNKNOWN PolicyTopicEntryType = "UNKNOWN"

	//
	// Will never serve.
	//
	PolicyTopicEntryTypePROHIBITED PolicyTopicEntryType = "PROHIBITED"

	//
	// Constrained for at least one value.
	//
	PolicyTopicEntryTypeLIMITED PolicyTopicEntryType = "LIMITED"
)

//
// Describes the destination mismatch url type.
//

type PolicyTopicEvidenceDestinationMismatchUrlType string

const (

	//
	// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
	//
	PolicyTopicEvidenceDestinationMismatchUrlTypeUNKNOWN PolicyTopicEvidenceDestinationMismatchUrlType = "UNKNOWN"

	PolicyTopicEvidenceDestinationMismatchUrlTypeDISPLAY_URL PolicyTopicEvidenceDestinationMismatchUrlType = "DISPLAY_URL"

	PolicyTopicEvidenceDestinationMismatchUrlTypeFINAL_URL PolicyTopicEvidenceDestinationMismatchUrlType = "FINAL_URL"

	PolicyTopicEvidenceDestinationMismatchUrlTypeFINAL_MOBILE_URL PolicyTopicEvidenceDestinationMismatchUrlType = "FINAL_MOBILE_URL"

	//
	// Tracking template with substituted desktop url.
	//
	PolicyTopicEvidenceDestinationMismatchUrlTypeTRACKING_URL PolicyTopicEvidenceDestinationMismatchUrlType = "TRACKING_URL"

	//
	// Tracking template with substituted mobile url.
	//
	PolicyTopicEvidenceDestinationMismatchUrlTypeMOBILE_TRACKING_URL PolicyTopicEvidenceDestinationMismatchUrlType = "MOBILE_TRACKING_URL"
)

//
// Describes the type of evidence inside the policy topic evidence.
//

type PolicyTopicEvidenceType string

const (

	//
	// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
	//
	PolicyTopicEvidenceTypeUNKNOWN PolicyTopicEvidenceType = "UNKNOWN"

	//
	// Evidence found in the text of the ad.
	//
	PolicyTopicEvidenceTypeAD_TEXT PolicyTopicEvidenceType = "AD_TEXT"

	//
	// HTTP code returned when the final URL was crawled.
	//
	PolicyTopicEvidenceTypeHTTP_CODE PolicyTopicEvidenceType = "HTTP_CODE"

	//
	// List of websites linked with this ad.
	//
	PolicyTopicEvidenceTypeWEBSITES PolicyTopicEvidenceType = "WEBSITES"

	//
	// The language the ad was detected to be written in.
	//
	PolicyTopicEvidenceTypeLANGUAGE PolicyTopicEvidenceType = "LANGUAGE"

	//
	// List of evidence found in the text of the ad.
	//
	PolicyTopicEvidenceTypeAD_TEXT_LIST PolicyTopicEvidenceType = "AD_TEXT_LIST"

	//
	// The text in the destination of the ad that is causing a policy violation.
	//
	PolicyTopicEvidenceTypeDESTINATION_TEXT_LIST PolicyTopicEvidenceType = "DESTINATION_TEXT_LIST"

	//
	// Mismatch between any of Display URL, Final URL, and Final Mobile URL.
	//
	PolicyTopicEvidenceTypeDESTINATION_MISMATCH PolicyTopicEvidenceType = "DESTINATION_MISMATCH"
)

//
// Defines the valid set of operators.
//

type Predicate_Operator string

const (

	//
	// Checks if the field is equal to the given value.
	//
	// <p>This operator is used with integers, dates, booleans, strings,
	// enums, and sets.
	//
	Predicate_OperatorEQUALS Predicate_Operator = "EQUALS"

	//
	// Checks if the field does not equal the given value.
	//
	// <p>This operator is used with integers, booleans, strings, enums,
	// and sets.
	//
	Predicate_OperatorNOT_EQUALS Predicate_Operator = "NOT_EQUALS"

	//
	// Checks if the field is equal to one of the given values.
	//
	// <p>This operator accepts multiple operands and is used with
	// integers, booleans, strings, and enums.
	//
	Predicate_OperatorIN Predicate_Operator = "IN"

	//
	// Checks if the field does not equal any of the given values.
	//
	// <p>This operator accepts multiple operands and is used with
	// integers, booleans, strings, and enums.
	//
	Predicate_OperatorNOT_IN Predicate_Operator = "NOT_IN"

	//
	// Checks if the field is greater than the given value.
	//
	// <p>This operator is used with numbers and dates.
	//
	Predicate_OperatorGREATER_THAN Predicate_Operator = "GREATER_THAN"

	//
	// Checks if the field is greater or equal to the given value.
	//
	// <p>This operator is used with numbers and dates.
	//
	Predicate_OperatorGREATER_THAN_EQUALS Predicate_Operator = "GREATER_THAN_EQUALS"

	//
	// Checks if the field is less than the given value.
	//
	// <p>This operator is used with numbers and dates.
	//
	Predicate_OperatorLESS_THAN Predicate_Operator = "LESS_THAN"

	//
	// Checks if the field is less or equal to than the given value.
	//
	// <p>This operator is used with numbers and dates.
	//
	Predicate_OperatorLESS_THAN_EQUALS Predicate_Operator = "LESS_THAN_EQUALS"

	//
	// Checks if the field starts with the given value.
	//
	// <p>This operator is used with strings.
	//
	Predicate_OperatorSTARTS_WITH Predicate_Operator = "STARTS_WITH"

	//
	// Checks if the field starts with the given value, ignoring case.
	//
	// <p>This operator is used with strings.
	//
	Predicate_OperatorSTARTS_WITH_IGNORE_CASE Predicate_Operator = "STARTS_WITH_IGNORE_CASE"

	//
	// Checks if the field contains the given value as a substring.
	//
	// <p>This operator is used with strings.
	//
	Predicate_OperatorCONTAINS Predicate_Operator = "CONTAINS"

	//
	// Checks if the field contains the given value as a substring, ignoring
	// case.
	//
	// <p>This operator is used with strings.
	//
	Predicate_OperatorCONTAINS_IGNORE_CASE Predicate_Operator = "CONTAINS_IGNORE_CASE"

	//
	// Checks if the field does not contain the given value as a substring.
	//
	// <p>This operator is used with strings.
	//
	Predicate_OperatorDOES_NOT_CONTAIN Predicate_Operator = "DOES_NOT_CONTAIN"

	//
	// Checks if the field does not contain the given value as a substring,
	// ignoring case.
	//
	// <p>This operator is used with strings.
	//
	Predicate_OperatorDOES_NOT_CONTAIN_IGNORE_CASE Predicate_Operator = "DOES_NOT_CONTAIN_IGNORE_CASE"

	//
	// Checks if the field contains <em>any</em> of the given values.
	//
	// <p>This operator accepts multiple values and is used on sets of numbers
	// or strings.
	//
	Predicate_OperatorCONTAINS_ANY Predicate_Operator = "CONTAINS_ANY"

	//
	// Checks if the field contains <em>all</em> of the given values.
	//
	// <p>This operator accepts multiple values and is used on sets of numbers
	// or strings.
	//
	Predicate_OperatorCONTAINS_ALL Predicate_Operator = "CONTAINS_ALL"

	//
	// Checks if the field contains <em>none</em> of the given values.
	//
	// <p>This operator accepts multiple values and is used on sets of numbers
	// or strings.
	//
	Predicate_OperatorCONTAINS_NONE Predicate_Operator = "CONTAINS_NONE"

	//
	// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
	//
	Predicate_OperatorUNKNOWN Predicate_Operator = "UNKNOWN"
)

//
// The reason for the query error.
//

type QueryError_Reason string

const (

	//
	// Exception that happens when trying to parse a query that doesn't match the AWQL grammar.
	//
	QueryError_ReasonPARSING_FAILED QueryError_Reason = "PARSING_FAILED"

	//
	// The provided query is an empty string.
	//
	QueryError_ReasonMISSING_QUERY QueryError_Reason = "MISSING_QUERY"

	//
	// The query does not contain the required SELECT clause or it is not in the
	// correct location.
	//
	QueryError_ReasonMISSING_SELECT_CLAUSE QueryError_Reason = "MISSING_SELECT_CLAUSE"

	//
	// The query does not contain the required FROM clause or it is not in the correct location.
	//
	QueryError_ReasonMISSING_FROM_CLAUSE QueryError_Reason = "MISSING_FROM_CLAUSE"

	//
	// The SELECT clause could not be parsed.
	//
	QueryError_ReasonINVALID_SELECT_CLAUSE QueryError_Reason = "INVALID_SELECT_CLAUSE"

	//
	// The FROM clause could not be parsed.
	//
	QueryError_ReasonINVALID_FROM_CLAUSE QueryError_Reason = "INVALID_FROM_CLAUSE"

	//
	// The WHERE clause could not be parsed.
	//
	QueryError_ReasonINVALID_WHERE_CLAUSE QueryError_Reason = "INVALID_WHERE_CLAUSE"

	//
	// The ORDER BY clause could not be parsed.
	//
	QueryError_ReasonINVALID_ORDER_BY_CLAUSE QueryError_Reason = "INVALID_ORDER_BY_CLAUSE"

	//
	// The LIMIT clause could not be parsed.
	//
	QueryError_ReasonINVALID_LIMIT_CLAUSE QueryError_Reason = "INVALID_LIMIT_CLAUSE"

	//
	// The startIndex in the LIMIT clause does not contain a valid integer.
	//
	QueryError_ReasonINVALID_START_INDEX_IN_LIMIT_CLAUSE QueryError_Reason = "INVALID_START_INDEX_IN_LIMIT_CLAUSE"

	//
	// The pageSize in the LIMIT clause does not contain a valid integer.
	//
	QueryError_ReasonINVALID_PAGE_SIZE_IN_LIMIT_CLAUSE QueryError_Reason = "INVALID_PAGE_SIZE_IN_LIMIT_CLAUSE"

	//
	// The DURING clause could not be parsed.
	//
	QueryError_ReasonINVALID_DURING_CLAUSE QueryError_Reason = "INVALID_DURING_CLAUSE"

	//
	// The minimum date in the DURING clause is not a valid date in YYYYMMDD format.
	//
	QueryError_ReasonINVALID_MIN_DATE_IN_DURING_CLAUSE QueryError_Reason = "INVALID_MIN_DATE_IN_DURING_CLAUSE"

	//
	// The maximum date in the DURING clause is not a valid date in YYYYMMDD format.
	//
	QueryError_ReasonINVALID_MAX_DATE_IN_DURING_CLAUSE QueryError_Reason = "INVALID_MAX_DATE_IN_DURING_CLAUSE"

	//
	// The minimum date in the DURING is after the maximum date.
	//
	QueryError_ReasonMAX_LESS_THAN_MIN_IN_DURING_CLAUSE QueryError_Reason = "MAX_LESS_THAN_MIN_IN_DURING_CLAUSE"

	//
	// The query matched the grammar, but is invalid in some way such as using a service that
	// isn't supported.
	//
	QueryError_ReasonVALIDATION_FAILED QueryError_Reason = "VALIDATION_FAILED"
)

//
// Enums for all the reasons an error can be thrown to the user during
// billing quota checks.
//

type QuotaCheckError_Reason string

const (

	//
	// Customer passed in an invalid token in the header.
	//
	QuotaCheckError_ReasonINVALID_TOKEN_HEADER QuotaCheckError_Reason = "INVALID_TOKEN_HEADER"

	//
	// Customer is marked delinquent.
	//
	QuotaCheckError_ReasonACCOUNT_DELINQUENT QuotaCheckError_Reason = "ACCOUNT_DELINQUENT"

	//
	// Customer is a fraudulent.
	//
	QuotaCheckError_ReasonACCOUNT_INACCESSIBLE QuotaCheckError_Reason = "ACCOUNT_INACCESSIBLE"

	//
	// Inactive Account.
	//
	QuotaCheckError_ReasonACCOUNT_INACTIVE QuotaCheckError_Reason = "ACCOUNT_INACTIVE"

	//
	// Signup not complete
	//
	QuotaCheckError_ReasonINCOMPLETE_SIGNUP QuotaCheckError_Reason = "INCOMPLETE_SIGNUP"

	//
	// Developer token is not approved for production access, and the customer
	// is attempting to access a production account.
	//
	QuotaCheckError_ReasonDEVELOPER_TOKEN_NOT_APPROVED QuotaCheckError_Reason = "DEVELOPER_TOKEN_NOT_APPROVED"

	//
	// Terms and conditions are not signed.
	//
	QuotaCheckError_ReasonTERMS_AND_CONDITIONS_NOT_SIGNED QuotaCheckError_Reason = "TERMS_AND_CONDITIONS_NOT_SIGNED"

	//
	// Monthly budget quota reached.
	//
	QuotaCheckError_ReasonMONTHLY_BUDGET_REACHED QuotaCheckError_Reason = "MONTHLY_BUDGET_REACHED"

	//
	// Monthly budget quota exceeded.
	//
	QuotaCheckError_ReasonQUOTA_EXCEEDED QuotaCheckError_Reason = "QUOTA_EXCEEDED"
)

//
// The reasons for the target error.
//

type RangeError_Reason string

const (
	RangeError_ReasonTOO_LOW RangeError_Reason = "TOO_LOW"

	RangeError_ReasonTOO_HIGH RangeError_Reason = "TOO_HIGH"
)

//
// The reason for the rate exceeded error.
//

type RateExceededError_Reason string

const (

	//
	// Rate exceeded.
	//
	RateExceededError_ReasonRATE_EXCEEDED RateExceededError_Reason = "RATE_EXCEEDED"
)

//
// The reasons for the target error.
//

type ReadOnlyError_Reason string

const (
	ReadOnlyError_ReasonREAD_ONLY ReadOnlyError_Reason = "READ_ONLY"
)

//
// The reasons for the validation error.
//

type RegionCodeError_Reason string

const (
	RegionCodeError_ReasonINVALID_REGION_CODE RegionCodeError_Reason = "INVALID_REGION_CODE"
)

//
// The reasons for the target error.
//

type RejectedError_Reason string

const (

	//
	// Unknown value encountered
	//
	RejectedError_ReasonUNKNOWN_VALUE RejectedError_Reason = "UNKNOWN_VALUE"
)

type RequestError_Reason string

const (

	//
	// Error reason is unknown.
	//
	RequestError_ReasonUNKNOWN RequestError_Reason = "UNKNOWN"

	//
	// Invalid input.
	//
	RequestError_ReasonINVALID_INPUT RequestError_Reason = "INVALID_INPUT"

	//
	// The api version in the request has been discontinued. Please update
	// to the new AdWords API version.
	//
	RequestError_ReasonUNSUPPORTED_VERSION RequestError_Reason = "UNSUPPORTED_VERSION"
)

//
// The reasons for the target error.
//

type RequiredError_Reason string

const (

	//
	// Missing required field.
	//
	RequiredError_ReasonREQUIRED RequiredError_Reason = "REQUIRED"
)

//
// The reasons for the target error.
//

type SelectorError_Reason string

const (

	//
	// The field name is not valid.
	//
	SelectorError_ReasonINVALID_FIELD_NAME SelectorError_Reason = "INVALID_FIELD_NAME"

	//
	// The list of fields is null or empty.
	//
	SelectorError_ReasonMISSING_FIELDS SelectorError_Reason = "MISSING_FIELDS"

	//
	// The list of predicates is null or empty.
	//
	SelectorError_ReasonMISSING_PREDICATES SelectorError_Reason = "MISSING_PREDICATES"

	//
	// Predicate operator does not support multiple values. Multiple values are
	// supported only for {@link Predicate.Operator#IN} and {@link Predicate.Operator#NOT_IN}.
	//
	SelectorError_ReasonOPERATOR_DOES_NOT_SUPPORT_MULTIPLE_VALUES SelectorError_Reason = "OPERATOR_DOES_NOT_SUPPORT_MULTIPLE_VALUES"

	//
	// The predicate enum value is not valid.
	//
	SelectorError_ReasonINVALID_PREDICATE_ENUM_VALUE SelectorError_Reason = "INVALID_PREDICATE_ENUM_VALUE"

	//
	// The predicate operator is empty.
	//
	SelectorError_ReasonMISSING_PREDICATE_OPERATOR SelectorError_Reason = "MISSING_PREDICATE_OPERATOR"

	//
	// The predicate values are empty.
	//
	SelectorError_ReasonMISSING_PREDICATE_VALUES SelectorError_Reason = "MISSING_PREDICATE_VALUES"

	//
	// The predicate field name is not valid.
	//
	SelectorError_ReasonINVALID_PREDICATE_FIELD_NAME SelectorError_Reason = "INVALID_PREDICATE_FIELD_NAME"

	//
	// The predicate operator is not valid.
	//
	SelectorError_ReasonINVALID_PREDICATE_OPERATOR SelectorError_Reason = "INVALID_PREDICATE_OPERATOR"

	//
	// Invalid selection of fields.
	//
	SelectorError_ReasonINVALID_FIELD_SELECTION SelectorError_Reason = "INVALID_FIELD_SELECTION"

	//
	// The predicate value is not valid.
	//
	SelectorError_ReasonINVALID_PREDICATE_VALUE SelectorError_Reason = "INVALID_PREDICATE_VALUE"

	//
	// The sort field name is not valid or the field is not sortable.
	//
	SelectorError_ReasonINVALID_SORT_FIELD_NAME SelectorError_Reason = "INVALID_SORT_FIELD_NAME"

	//
	// Standard error.
	//
	SelectorError_ReasonSELECTOR_ERROR SelectorError_Reason = "SELECTOR_ERROR"

	//
	// Filtering by date range is not supported.
	//
	SelectorError_ReasonFILTER_BY_DATE_RANGE_NOT_SUPPORTED SelectorError_Reason = "FILTER_BY_DATE_RANGE_NOT_SUPPORTED"

	//
	// Selector paging start index is too high.
	//
	SelectorError_ReasonSTART_INDEX_IS_TOO_HIGH SelectorError_Reason = "START_INDEX_IS_TOO_HIGH"

	//
	// The values list in a predicate was too long.
	//
	SelectorError_ReasonTOO_MANY_PREDICATE_VALUES SelectorError_Reason = "TOO_MANY_PREDICATE_VALUES"

	//
	// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
	//
	SelectorError_ReasonUNKNOWN_ERROR SelectorError_Reason = "UNKNOWN_ERROR"
)

//
// Campaign serving status.
//

type ServingStatus string

const (

	//
	// The campaign is currently serving ads.
	//
	ServingStatusSERVING ServingStatus = "SERVING"

	//
	// This is the catch-all if none of the other statuses make sense.
	// Such a campaign is not serving, but none of the other statuses
	// are sensible options.
	//
	ServingStatusNONE ServingStatus = "NONE"

	//
	// The campaign end date has been past.
	//
	ServingStatusENDED ServingStatus = "ENDED"

	//
	// The campaign start date has not yet been reached.
	//
	ServingStatusPENDING ServingStatus = "PENDING"

	//
	// The campaign has been suspended probably from lack of allocated funds.
	//
	ServingStatusSUSPENDED ServingStatus = "SUSPENDED"
)

//
// The reasons for the setting error.
//

type SettingError_Reason string

const (

	//
	// The campaign already has a setting of the type that is being added.
	//
	SettingError_ReasonDUPLICATE_SETTING_TYPE SettingError_Reason = "DUPLICATE_SETTING_TYPE"

	//
	// The campaign setting is not available for this AdWords account.
	//
	SettingError_ReasonSETTING_TYPE_IS_NOT_AVAILABLE SettingError_Reason = "SETTING_TYPE_IS_NOT_AVAILABLE"

	//
	// The setting is not compatible with the campaign.
	//
	SettingError_ReasonSETTING_TYPE_IS_NOT_COMPATIBLE_WITH_CAMPAIGN SettingError_Reason = "SETTING_TYPE_IS_NOT_COMPATIBLE_WITH_CAMPAIGN"

	//
	// The supplied TargetingSetting contains an invalid CriterionTypeGroup. See
	// {@link CriterionTypeGroup} documentation for CriterionTypeGroups allowed in Campaign or
	// AdGroup TargetingSettings.
	//
	SettingError_ReasonTARGETING_SETTING_CONTAINS_INVALID_CRITERION_TYPE_GROUP SettingError_Reason = "TARGETING_SETTING_CONTAINS_INVALID_CRITERION_TYPE_GROUP"

	//
	// Starting with AdWords API v201802, TargetingSetting must not explicitly set any of the
	// Demographic CriterionTypeGroups (AGE_RANGE, GENDER, PARENT, INCOME_RANGE) to false (it's
	// okay to not set them at all, in which case the system will set them to true automatically).
	//
	SettingError_ReasonTARGETING_SETTING_DEMOGRAPHIC_CRITERION_TYPE_GROUPS_MUST_BE_SET_TO_TARGET_ALL SettingError_Reason = "TARGETING_SETTING_DEMOGRAPHIC_CRITERION_TYPE_GROUPS_MUST_BE_SET_TO_TARGET_ALL"

	//
	// Starting with AdWords API v201802,TargetingSetting cannot change any of the Demographic
	// CriterionTypeGroups (AGE_RANGE, GENDER, PARENT, INCOME_RANGE) from true to false.
	//
	SettingError_ReasonTARGETING_SETTING_CANNOT_CHANGE_TARGET_ALL_TO_FALSE_FOR_DEMOGRAPHIC_CRITERION_TYPE_GROUP SettingError_Reason = "TARGETING_SETTING_CANNOT_CHANGE_TARGET_ALL_TO_FALSE_FOR_DEMOGRAPHIC_CRITERION_TYPE_GROUP"

	//
	// At least one feed id should be present.
	//
	SettingError_ReasonDYNAMIC_SEARCH_ADS_SETTING_AT_LEAST_ONE_FEED_ID_MUST_BE_PRESENT SettingError_Reason = "DYNAMIC_SEARCH_ADS_SETTING_AT_LEAST_ONE_FEED_ID_MUST_BE_PRESENT"

	//
	// The supplied DynamicSearchAdsSetting contains an invalid domain name.
	//
	SettingError_ReasonDYNAMIC_SEARCH_ADS_SETTING_CONTAINS_INVALID_DOMAIN_NAME SettingError_Reason = "DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_INVALID_DOMAIN_NAME"

	//
	// The supplied DynamicSearchAdsSetting contains a subdomain name.
	//
	SettingError_ReasonDYNAMIC_SEARCH_ADS_SETTING_CONTAINS_SUBDOMAIN_NAME SettingError_Reason = "DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_SUBDOMAIN_NAME"

	//
	// The supplied DynamicSearchAdsSetting contains an invalid language code.
	//
	SettingError_ReasonDYNAMIC_SEARCH_ADS_SETTING_CONTAINS_INVALID_LANGUAGE_CODE SettingError_Reason = "DYNAMIC_SEARCH_ADS_SETTING_CONTAINS_INVALID_LANGUAGE_CODE"

	//
	// TargetingSettings in search campaigns should not have CriterionTypeGroup.PLACEMENT
	// set to targetAll.
	//
	SettingError_ReasonTARGET_ALL_IS_NOT_ALLOWED_FOR_PLACEMENT_IN_SEARCH_CAMPAIGN SettingError_Reason = "TARGET_ALL_IS_NOT_ALLOWED_FOR_PLACEMENT_IN_SEARCH_CAMPAIGN"

	//
	// Duplicate description in universal app setting description field.
	//
	SettingError_ReasonUNIVERSAL_APP_CAMPAIGN_SETTING_DUPLICATE_DESCRIPTION SettingError_Reason = "UNIVERSAL_APP_CAMPAIGN_SETTING_DUPLICATE_DESCRIPTION"

	//
	// Description line width is too long in universal app setting description field.
	//
	SettingError_ReasonUNIVERSAL_APP_CAMPAIGN_SETTING_DESCRIPTION_LINE_WIDTH_TOO_LONG SettingError_Reason = "UNIVERSAL_APP_CAMPAIGN_SETTING_DESCRIPTION_LINE_WIDTH_TOO_LONG"

	//
	// Universal app setting appId field cannot be modified for COMPLETE campaigns.
	//
	SettingError_ReasonUNIVERSAL_APP_CAMPAIGN_SETTING_APP_ID_CANNOT_BE_MODIFIED SettingError_Reason = "UNIVERSAL_APP_CAMPAIGN_SETTING_APP_ID_CANNOT_BE_MODIFIED"

	//
	// YoutubeVideoMediaIds in universal app setting cannot exceed size limit.
	//
	SettingError_ReasonTOO_MANY_YOUTUBE_MEDIA_IDS_IN_UNIVERSAL_APP_CAMPAIGN SettingError_Reason = "TOO_MANY_YOUTUBE_MEDIA_IDS_IN_UNIVERSAL_APP_CAMPAIGN"

	//
	// ImageMediaIds in universal app setting cannot exceed size limit.
	//
	SettingError_ReasonTOO_MANY_IMAGE_MEDIA_IDS_IN_UNIVERSAL_APP_CAMPAIGN SettingError_Reason = "TOO_MANY_IMAGE_MEDIA_IDS_IN_UNIVERSAL_APP_CAMPAIGN"

	//
	// Media is incompatible for universal app campaign.
	//
	SettingError_ReasonMEDIA_INCOMPATIBLE_FOR_UNIVERSAL_APP_CAMPAIGN SettingError_Reason = "MEDIA_INCOMPATIBLE_FOR_UNIVERSAL_APP_CAMPAIGN"

	//
	// Too many exclamation marks in universal app campaign ad text ideas.
	//
	SettingError_ReasonTOO_MANY_EXCLAMATION_MARKS SettingError_Reason = "TOO_MANY_EXCLAMATION_MARKS"

	//
	// Unspecified campaign setting error.
	// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
	//
	SettingError_ReasonUNKNOWN SettingError_Reason = "UNKNOWN"
)

//
// The reasons for Ad Scheduling errors.
//

type SizeLimitError_Reason string

const (

	//
	// The number of entries in the request exceeds the system limit.
	//
	SizeLimitError_ReasonREQUEST_SIZE_LIMIT_EXCEEDED SizeLimitError_Reason = "REQUEST_SIZE_LIMIT_EXCEEDED"

	//
	// The number of entries in the response exceeds the system limit.
	//
	SizeLimitError_ReasonRESPONSE_SIZE_LIMIT_EXCEEDED SizeLimitError_Reason = "RESPONSE_SIZE_LIMIT_EXCEEDED"

	//
	// The account is too large to load.
	//
	SizeLimitError_ReasonINTERNAL_STORAGE_ERROR SizeLimitError_Reason = "INTERNAL_STORAGE_ERROR"

	//
	// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
	//
	SizeLimitError_ReasonUNKNOWN SizeLimitError_Reason = "UNKNOWN"
)

//
// Possible orders of sorting.
//

type SortOrder string

const (
	SortOrderASCENDING SortOrder = "ASCENDING"

	SortOrderDESCENDING SortOrder = "DESCENDING"
)

//
// The reasons for errors when querying for stats.
//

type StatsQueryError_Reason string

const (

	//
	// Date is outside of allowed range.
	//
	StatsQueryError_ReasonDATE_NOT_IN_VALID_RANGE StatsQueryError_Reason = "DATE_NOT_IN_VALID_RANGE"
)

//
// The reasons for the target error.
//

type StringFormatError_Reason string

const (
	StringFormatError_ReasonUNKNOWN StringFormatError_Reason = "UNKNOWN"

	//
	// The input string value contains disallowed characters.
	//
	StringFormatError_ReasonILLEGAL_CHARS StringFormatError_Reason = "ILLEGAL_CHARS"

	//
	// The input string value is invalid for the associated field.
	//
	StringFormatError_ReasonINVALID_FORMAT StringFormatError_Reason = "INVALID_FORMAT"
)

//
// The reasons for the target error.
//

type StringLengthError_Reason string

const (
	StringLengthError_ReasonTOO_SHORT StringLengthError_Reason = "TOO_SHORT"

	StringLengthError_ReasonTOO_LONG StringLengthError_Reason = "TOO_LONG"
)

//
// Unit of time the cap is defined at.
//

type TimeUnit string

const (
	TimeUnitMINUTE TimeUnit = "MINUTE"

	TimeUnitHOUR TimeUnit = "HOUR"

	TimeUnitDAY TimeUnit = "DAY"

	TimeUnitWEEK TimeUnit = "WEEK"

	TimeUnitMONTH TimeUnit = "MONTH"

	TimeUnitLIFETIME TimeUnit = "LIFETIME"
)

//
// Represents the goal towards which the bidding strategy, of a universal app
// campaign, should optimize for.
//

type UniversalAppBiddingStrategyGoalType string

const (

	//
	// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
	//
	UniversalAppBiddingStrategyGoalTypeUNKNOWN UniversalAppBiddingStrategyGoalType = "UNKNOWN"

	//
	// The bidding strategy of the universal app campaign should aim to maximize
	// installation of the app.
	//
	UniversalAppBiddingStrategyGoalTypeOPTIMIZE_FOR_INSTALL_CONVERSION_VOLUME UniversalAppBiddingStrategyGoalType = "OPTIMIZE_FOR_INSTALL_CONVERSION_VOLUME"

	//
	// The bidding strategy of the universal app campaign should aim to maximize the
	// selected in-app conversions' volume.
	//
	UniversalAppBiddingStrategyGoalTypeOPTIMIZE_FOR_IN_APP_CONVERSION_VOLUME UniversalAppBiddingStrategyGoalType = "OPTIMIZE_FOR_IN_APP_CONVERSION_VOLUME"

	//
	// The bidding strategy of the universal app campaign should aim to maximize all
	// conversions' value, i.e., install + selected in-app conversions. NOTE: This
	// value cannot be set by external clients, but it can be retrieved using get.
	//
	UniversalAppBiddingStrategyGoalTypeOPTIMIZE_FOR_TOTAL_CONVERSION_VALUE UniversalAppBiddingStrategyGoalType = "OPTIMIZE_FOR_TOTAL_CONVERSION_VALUE"

	//
	// The bidding strategy of the universal app campaign should aim to maximize just
	// the selected in-app conversion's volume, while achieving or exceeding target
	// cost per in-app conversion.
	//
	UniversalAppBiddingStrategyGoalTypeOPTIMIZE_FOR_TARGET_IN_APP_CONVERSION UniversalAppBiddingStrategyGoalType = "OPTIMIZE_FOR_TARGET_IN_APP_CONVERSION"

	//
	// The bidding strategy of the universal app campaign should aim to maximize all
	// conversions' value, i.e., install + selected in-app conversions while achieving
	// or exceeding target return on advertising spend.
	//
	UniversalAppBiddingStrategyGoalTypeOPTIMIZE_FOR_RETURN_ON_ADVERTISING_SPEND UniversalAppBiddingStrategyGoalType = "OPTIMIZE_FOR_RETURN_ON_ADVERTISING_SPEND"
)

//
// Represents the individual assets that are utilized as part of the campaign.
//

type UniversalAppCampaignAsset string

const (

	//
	// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
	//
	UniversalAppCampaignAssetUNKNOWN UniversalAppCampaignAsset = "UNKNOWN"

	//
	// Identifies a combination of assets.
	//
	UniversalAppCampaignAssetCOMBINATION UniversalAppCampaignAsset = "COMBINATION"

	//
	// Identifies the app destination.
	//
	UniversalAppCampaignAssetAPP_DESTINATION UniversalAppCampaignAsset = "APP_DESTINATION"

	//
	// Identifies the app related data, like app name, app icon, developer name
	// including translations of the content.
	//
	UniversalAppCampaignAssetAPP_ASSETS UniversalAppCampaignAsset = "APP_ASSETS"

	//
	// Identifies the campaign setting's description1 field.
	//
	UniversalAppCampaignAssetDESCRIPTION_1 UniversalAppCampaignAsset = "DESCRIPTION_1"

	//
	// Identifies the campaign setting's description2 field.
	//
	UniversalAppCampaignAssetDESCRIPTION_2 UniversalAppCampaignAsset = "DESCRIPTION_2"

	//
	// Identifies the campaign setting's description3 field.
	//
	UniversalAppCampaignAssetDESCRIPTION_3 UniversalAppCampaignAsset = "DESCRIPTION_3"

	//
	// Identifies the campaign setting's description4 field.
	//
	UniversalAppCampaignAssetDESCRIPTION_4 UniversalAppCampaignAsset = "DESCRIPTION_4"

	//
	// Identifies the campaign setting's video fields.
	//
	UniversalAppCampaignAssetVIDEO UniversalAppCampaignAsset = "VIDEO"

	//
	// Identifies the campaign setting's image fields.
	//
	UniversalAppCampaignAssetIMAGE UniversalAppCampaignAsset = "IMAGE"
)

//
// The reasons for the url error.
//

type UrlError_Reason string

const (

	//
	// The tracking url template is invalid.
	//
	UrlError_ReasonINVALID_TRACKING_URL_TEMPLATE UrlError_Reason = "INVALID_TRACKING_URL_TEMPLATE"

	//
	// The tracking url template contains invalid tag.
	//
	UrlError_ReasonINVALID_TAG_IN_TRACKING_URL_TEMPLATE UrlError_Reason = "INVALID_TAG_IN_TRACKING_URL_TEMPLATE"

	//
	// The tracking url template must contain at least one tag (e.g. {lpurl}),
	// This applies only to tracking url template associated with website ads or product ads.
	//
	UrlError_ReasonMISSING_TRACKING_URL_TEMPLATE_TAG UrlError_Reason = "MISSING_TRACKING_URL_TEMPLATE_TAG"

	//
	// The tracking url template must start with a valid protocol (or lpurl tag).
	//
	UrlError_ReasonMISSING_PROTOCOL_IN_TRACKING_URL_TEMPLATE UrlError_Reason = "MISSING_PROTOCOL_IN_TRACKING_URL_TEMPLATE"

	//
	// The tracking url template starts with an invalid protocol.
	//
	UrlError_ReasonINVALID_PROTOCOL_IN_TRACKING_URL_TEMPLATE UrlError_Reason = "INVALID_PROTOCOL_IN_TRACKING_URL_TEMPLATE"

	//
	// The tracking url template  contains illegal characters.
	//
	UrlError_ReasonMALFORMED_TRACKING_URL_TEMPLATE UrlError_Reason = "MALFORMED_TRACKING_URL_TEMPLATE"

	//
	// The tracking url template must contain a host name (or lpurl tag).
	//
	UrlError_ReasonMISSING_HOST_IN_TRACKING_URL_TEMPLATE UrlError_Reason = "MISSING_HOST_IN_TRACKING_URL_TEMPLATE"

	//
	// The tracking url template has an invalid or missing top level domain extension.
	//
	UrlError_ReasonINVALID_TLD_IN_TRACKING_URL_TEMPLATE UrlError_Reason = "INVALID_TLD_IN_TRACKING_URL_TEMPLATE"

	//
	// The tracking url template contains nested occurrences of the same conditional tag
	// (i.e. {ifmobile:{ifmobile:x}}).
	//
	UrlError_ReasonREDUNDANT_NESTED_TRACKING_URL_TEMPLATE_TAG UrlError_Reason = "REDUNDANT_NESTED_TRACKING_URL_TEMPLATE_TAG"

	//
	// The final url is invalid.
	//
	UrlError_ReasonINVALID_FINAL_URL UrlError_Reason = "INVALID_FINAL_URL"

	//
	// The final url contains invalid tag.
	//
	UrlError_ReasonINVALID_TAG_IN_FINAL_URL UrlError_Reason = "INVALID_TAG_IN_FINAL_URL"

	//
	// The final url contains nested occurrences of the same conditional tag
	// (i.e. {ifmobile:{ifmobile:x}}).
	//
	UrlError_ReasonREDUNDANT_NESTED_FINAL_URL_TAG UrlError_Reason = "REDUNDANT_NESTED_FINAL_URL_TAG"

	//
	// The final url must start with a valid protocol.
	//
	UrlError_ReasonMISSING_PROTOCOL_IN_FINAL_URL UrlError_Reason = "MISSING_PROTOCOL_IN_FINAL_URL"

	//
	// The final url starts with an invalid protocol.
	//
	UrlError_ReasonINVALID_PROTOCOL_IN_FINAL_URL UrlError_Reason = "INVALID_PROTOCOL_IN_FINAL_URL"

	//
	// The final url  contains illegal characters.
	//
	UrlError_ReasonMALFORMED_FINAL_URL UrlError_Reason = "MALFORMED_FINAL_URL"

	//
	// The final url must contain a host name.
	//
	UrlError_ReasonMISSING_HOST_IN_FINAL_URL UrlError_Reason = "MISSING_HOST_IN_FINAL_URL"

	//
	// The tracking url template has an invalid or missing top level domain extension.
	//
	UrlError_ReasonINVALID_TLD_IN_FINAL_URL UrlError_Reason = "INVALID_TLD_IN_FINAL_URL"

	//
	// The final mobile url is invalid.
	//
	UrlError_ReasonINVALID_FINAL_MOBILE_URL UrlError_Reason = "INVALID_FINAL_MOBILE_URL"

	//
	// The final mobile url contains invalid tag.
	//
	UrlError_ReasonINVALID_TAG_IN_FINAL_MOBILE_URL UrlError_Reason = "INVALID_TAG_IN_FINAL_MOBILE_URL"

	//
	// The final mobile url contains nested occurrences of the same conditional tag
	// (i.e. {ifmobile:{ifmobile:x}}).
	//
	UrlError_ReasonREDUNDANT_NESTED_FINAL_MOBILE_URL_TAG UrlError_Reason = "REDUNDANT_NESTED_FINAL_MOBILE_URL_TAG"

	//
	// The final mobile url must start with a valid protocol.
	//
	UrlError_ReasonMISSING_PROTOCOL_IN_FINAL_MOBILE_URL UrlError_Reason = "MISSING_PROTOCOL_IN_FINAL_MOBILE_URL"

	//
	// The final mobile url starts with an invalid protocol.
	//
	UrlError_ReasonINVALID_PROTOCOL_IN_FINAL_MOBILE_URL UrlError_Reason = "INVALID_PROTOCOL_IN_FINAL_MOBILE_URL"

	//
	// The final mobile url  contains illegal characters.
	//
	UrlError_ReasonMALFORMED_FINAL_MOBILE_URL UrlError_Reason = "MALFORMED_FINAL_MOBILE_URL"

	//
	// The final mobile url must contain a host name.
	//
	UrlError_ReasonMISSING_HOST_IN_FINAL_MOBILE_URL UrlError_Reason = "MISSING_HOST_IN_FINAL_MOBILE_URL"

	//
	// The tracking url template has an invalid or missing top level domain extension.
	//
	UrlError_ReasonINVALID_TLD_IN_FINAL_MOBILE_URL UrlError_Reason = "INVALID_TLD_IN_FINAL_MOBILE_URL"

	//
	// The final app url is invalid.
	//
	UrlError_ReasonINVALID_FINAL_APP_URL UrlError_Reason = "INVALID_FINAL_APP_URL"

	//
	// The final app url contains invalid tag.
	//
	UrlError_ReasonINVALID_TAG_IN_FINAL_APP_URL UrlError_Reason = "INVALID_TAG_IN_FINAL_APP_URL"

	//
	// The final app url contains nested occurrences of the same conditional tag
	// (i.e. {ifmobile:{ifmobile:x}}).
	//
	UrlError_ReasonREDUNDANT_NESTED_FINAL_APP_URL_TAG UrlError_Reason = "REDUNDANT_NESTED_FINAL_APP_URL_TAG"

	//
	// More than one app url found for the same OS type.
	//
	UrlError_ReasonMULTIPLE_APP_URLS_FOR_OSTYPE UrlError_Reason = "MULTIPLE_APP_URLS_FOR_OSTYPE"

	//
	// The OS type given for an app url is not valid.
	//
	UrlError_ReasonINVALID_OSTYPE UrlError_Reason = "INVALID_OSTYPE"

	//
	// The protocol given for an app url is not valid. (E.g. "android-app://")
	//
	UrlError_ReasonINVALID_PROTOCOL_FOR_APP_URL UrlError_Reason = "INVALID_PROTOCOL_FOR_APP_URL"

	//
	// The package id (app id) given for an app url is not valid.
	//
	UrlError_ReasonINVALID_PACKAGE_ID_FOR_APP_URL UrlError_Reason = "INVALID_PACKAGE_ID_FOR_APP_URL"

	//
	// The number of url custom parameters for an entity exceeds the maximum limit allowed.
	//
	UrlError_ReasonURL_CUSTOM_PARAMETERS_COUNT_EXCEEDS_LIMIT UrlError_Reason = "URL_CUSTOM_PARAMETERS_COUNT_EXCEEDS_LIMIT"

	//
	// The parameter has isRemove set to true but a value that is non-null.
	//
	UrlError_ReasonURL_CUSTOM_PARAMETER_REMOVAL_WITH_NON_NULL_VALUE UrlError_Reason = "URL_CUSTOM_PARAMETER_REMOVAL_WITH_NON_NULL_VALUE"

	//
	// For add operations, there will not be any existing parameters to delete.
	//
	UrlError_ReasonCANNOT_REMOVE_URL_CUSTOM_PARAMETER_IN_ADD_OPERATION UrlError_Reason = "CANNOT_REMOVE_URL_CUSTOM_PARAMETER_IN_ADD_OPERATION"

	//
	// When the doReplace flag is set to true, individual parameters cannot be deleted.
	//
	UrlError_ReasonCANNOT_REMOVE_URL_CUSTOM_PARAMETER_DURING_FULL_REPLACEMENT UrlError_Reason = "CANNOT_REMOVE_URL_CUSTOM_PARAMETER_DURING_FULL_REPLACEMENT"

	//
	// The final url suffix cannot begin with ? or & characters and must be a valid query string.
	//
	UrlError_ReasonFINAL_URL_SUFFIX_MALFORMED UrlError_Reason = "FINAL_URL_SUFFIX_MALFORMED"

	//
	// The final url suffix cannot contain {lpurl} related or {ignore} tags.
	//
	UrlError_ReasonINVALID_TAG_IN_FINAL_URL_SUFFIX UrlError_Reason = "INVALID_TAG_IN_FINAL_URL_SUFFIX"

	//
	// For ADD operations and when the doReplace flag is set to true, custom parameter values
	// cannot be null.
	//
	UrlError_ReasonNULL_CUSTOM_PARAMETER_VALUE_DURING_ADD_OR_FULL_REPLACEMENT UrlError_Reason = "NULL_CUSTOM_PARAMETER_VALUE_DURING_ADD_OR_FULL_REPLACEMENT"

	//
	// An invalid character appears in the parameter key.
	//
	UrlError_ReasonINVALID_CHARACTERS_IN_URL_CUSTOM_PARAMETER_KEY UrlError_Reason = "INVALID_CHARACTERS_IN_URL_CUSTOM_PARAMETER_KEY"

	//
	// An invalid character appears in the parameter value.
	//
	UrlError_ReasonINVALID_CHARACTERS_IN_URL_CUSTOM_PARAMETER_VALUE UrlError_Reason = "INVALID_CHARACTERS_IN_URL_CUSTOM_PARAMETER_VALUE"

	//
	// The url custom parameter value fails url tag validation.
	//
	UrlError_ReasonINVALID_TAG_IN_URL_CUSTOM_PARAMETER_VALUE UrlError_Reason = "INVALID_TAG_IN_URL_CUSTOM_PARAMETER_VALUE"

	//
	// The custom parameter contains nested occurrences of the same conditional tag
	// (i.e. {ifmobile:{ifmobile:x}}).
	//
	UrlError_ReasonREDUNDANT_NESTED_URL_CUSTOM_PARAMETER_TAG UrlError_Reason = "REDUNDANT_NESTED_URL_CUSTOM_PARAMETER_TAG"

	//
	// The protocol (http:// or https://) is missing.
	//
	UrlError_ReasonMISSING_PROTOCOL UrlError_Reason = "MISSING_PROTOCOL"

	//
	// The url is invalid.
	//
	UrlError_ReasonINVALID_URL UrlError_Reason = "INVALID_URL"

	//
	// Destination Url is deprecated.
	//
	UrlError_ReasonDESTINATION_URL_DEPRECATED UrlError_Reason = "DESTINATION_URL_DEPRECATED"

	//
	// The url contains invalid tag.
	//
	UrlError_ReasonINVALID_TAG_IN_URL UrlError_Reason = "INVALID_TAG_IN_URL"

	//
	// The url must contain at least one tag (e.g. {lpurl}),
	// This applies only to urls associated with website ads or product ads.
	//
	UrlError_ReasonMISSING_URL_TAG UrlError_Reason = "MISSING_URL_TAG"

	UrlError_ReasonDUPLICATE_URL_ID UrlError_Reason = "DUPLICATE_URL_ID"

	UrlError_ReasonINVALID_URL_ID UrlError_Reason = "INVALID_URL_ID"

	UrlError_ReasonURL_ERROR UrlError_Reason = "URL_ERROR"
)

//
// Mode of display URL for pharma related text ads.
//

type VanityPharmaDisplayUrlMode string

const (

	//
	// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
	//
	VanityPharmaDisplayUrlModeUNKNOWN VanityPharmaDisplayUrlMode = "UNKNOWN"

	//
	// Replace vanity pharma URL with manufacturer website url.
	//
	VanityPharmaDisplayUrlModeMANUFACTURER_WEBSITE_URL VanityPharmaDisplayUrlMode = "MANUFACTURER_WEBSITE_URL"

	//
	// Replace vanity pharma URL with description of the website.
	//
	VanityPharmaDisplayUrlModeWEBSITE_DESCRIPTION VanityPharmaDisplayUrlMode = "WEBSITE_DESCRIPTION"
)

//
// Static text for Vanity Pharma URLs. This text with website descriptions will be
// shown in the display URL when website description option for vanity pharma URLs
// is selected.
//

type VanityPharmaText string

const (

	//
	// <span class="constraint Rejected">Used for return value only. An enumeration could not be processed, typically due to incompatibility with your WSDL version.</span>
	//
	VanityPharmaTextUNKNOWN VanityPharmaText = "UNKNOWN"

	//
	// Prescription treatment website
	//
	VanityPharmaTextPRESCRIPTION_TREATMENT_WEBSITE_EN VanityPharmaText = "PRESCRIPTION_TREATMENT_WEBSITE_EN"

	//
	// Sitio de tratamientos con receta
	//
	VanityPharmaTextPRESCRIPTION_TREATMENT_WEBSITE_ES VanityPharmaText = "PRESCRIPTION_TREATMENT_WEBSITE_ES"

	//
	// Prescription device website
	//
	VanityPharmaTextPRESCRIPTION_DEVICE_WEBSITE_EN VanityPharmaText = "PRESCRIPTION_DEVICE_WEBSITE_EN"

	//
	// Sitio de dispositivos con receta
	//
	VanityPharmaTextPRESCRIPTION_DEVICE_WEBSITE_ES VanityPharmaText = "PRESCRIPTION_DEVICE_WEBSITE_ES"

	//
	// Medical device website
	//
	VanityPharmaTextMEDICAL_DEVICE_WEBSITE_EN VanityPharmaText = "MEDICAL_DEVICE_WEBSITE_EN"

	//
	// Sitio de dispositivos m?dicos
	//
	VanityPharmaTextMEDICAL_DEVICE_WEBSITE_ES VanityPharmaText = "MEDICAL_DEVICE_WEBSITE_ES"

	//
	// Preventative treatment website
	//
	VanityPharmaTextPREVENTATIVE_TREATMENT_WEBSITE_EN VanityPharmaText = "PREVENTATIVE_TREATMENT_WEBSITE_EN"

	//
	// Sitio de tratamientos preventivos
	//
	VanityPharmaTextPREVENTATIVE_TREATMENT_WEBSITE_ES VanityPharmaText = "PREVENTATIVE_TREATMENT_WEBSITE_ES"

	//
	// Prescription contraception website
	//
	VanityPharmaTextPRESCRIPTION_CONTRACEPTION_WEBSITE_EN VanityPharmaText = "PRESCRIPTION_CONTRACEPTION_WEBSITE_EN"

	//
	// Sitio de anticonceptivos con receta
	//
	VanityPharmaTextPRESCRIPTION_CONTRACEPTION_WEBSITE_ES VanityPharmaText = "PRESCRIPTION_CONTRACEPTION_WEBSITE_ES"

	//
	// Prescription vaccine website
	//
	VanityPharmaTextPRESCRIPTION_VACCINE_WEBSITE_EN VanityPharmaText = "PRESCRIPTION_VACCINE_WEBSITE_EN"

	//
	// Sitio de vacunas con receta
	//
	VanityPharmaTextPRESCRIPTION_VACCINE_WEBSITE_ES VanityPharmaText = "PRESCRIPTION_VACCINE_WEBSITE_ES"
)

type Get struct {
	XMLName xml.Name `xml:"https://adwords.google.com/api/adwords/cm/v201809 get"`

	//
	// <span class="constraint Required">This field is required and should not be {@code null}.</span>
	//
	ServiceSelector *Selector `xml:"serviceSelector,omitempty" json:"serviceSelector,omitempty"`
}

type GetResponse struct {
	XMLName xml.Name `xml:"https://adwords.google.com/api/adwords/cm/v201809 getResponse"`

	Rval *CampaignPage `xml:"rval,omitempty" json:"rval,omitempty"`
}

type ApiExceptionFault ApiException

type Mutate struct {
	XMLName xml.Name `xml:"https://adwords.google.com/api/adwords/cm/v201809 mutate"`

	//
	// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
	// <span class="constraint DistinctIds">Elements in this field must have distinct IDs for following {@link Operator}s : SET, REMOVE.</span>
	// <span class="constraint NotEmpty">This field must contain at least one element.</span>
	// <span class="constraint Required">This field is required and should not be {@code null}.</span>
	// <span class="constraint SupportedOperators">The following {@link Operator}s are supported: ADD, SET.</span>
	//
	Operations []*CampaignOperation `xml:"operations,omitempty" json:"operations,omitempty"`
}

type MutateResponse struct {
	XMLName xml.Name `xml:"https://adwords.google.com/api/adwords/cm/v201809 mutateResponse"`

	Rval *CampaignReturnValue `xml:"rval,omitempty" json:"rval,omitempty"`
}

type MutateLabel struct {
	XMLName xml.Name `xml:"https://adwords.google.com/api/adwords/cm/v201809 mutateLabel"`

	//
	// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
	// <span class="constraint DistinctIds">Elements in this field must have distinct IDs for following {@link Operator}s : ADD, REMOVE.</span>
	// <span class="constraint NotEmpty">This field must contain at least one element.</span>
	// <span class="constraint Required">This field is required and should not be {@code null}.</span>
	// <span class="constraint SupportedOperators">The following {@link Operator}s are supported: ADD, REMOVE.</span>
	//
	Operations []*CampaignLabelOperation `xml:"operations,omitempty" json:"operations,omitempty"`
}

type MutateLabelResponse struct {
	XMLName xml.Name `xml:"https://adwords.google.com/api/adwords/cm/v201809 mutateLabelResponse"`

	Rval *CampaignLabelReturnValue `xml:"rval,omitempty" json:"rval,omitempty"`
}

type Query struct {
	XMLName xml.Name `xml:"https://adwords.google.com/api/adwords/cm/v201809 query"`

	//
	// <span class="constraint Required">This field is required and should not be {@code null}.</span>
	//
	Query string `xml:"query,omitempty" json:"query,omitempty"`
}

type QueryResponse struct {
	XMLName xml.Name `xml:"https://adwords.google.com/api/adwords/cm/v201809 queryResponse"`

	Rval *CampaignPage `xml:"rval,omitempty" json:"rval,omitempty"`
}

type RequestHeader SoapHeader

type ResponseHeader SoapResponseHeader

type AdxError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *AdxError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ApiError struct {

	//
	// The OGNL field path to identify cause of error.
	//
	FieldPath string `xml:"fieldPath,omitempty" json:"fieldPath,omitempty"`

	//
	// A parsed copy of the field path. For example, the field path "operations[1].operand"
	// corresponds to this list: {FieldPathElement(field = "operations", index = 1),
	// FieldPathElement(field = "operand", index = null)}.
	//
	FieldPathElements []*FieldPathElement `xml:"fieldPathElements,omitempty" json:"fieldPathElements,omitempty"`

	//
	// The data that caused the error.
	//
	Trigger string `xml:"trigger,omitempty" json:"trigger,omitempty"`

	//
	// A simple string representation of the error and reason.
	//
	ErrorString string `xml:"errorString,omitempty" json:"errorString,omitempty"`

	//
	// Indicates that this instance is a subtype of ApiError.
	// Although this field is returned in the response, it is ignored on input
	// and cannot be selected. Specify xsi:type instead.
	//
	ApiError_Type string `xml:"ApiError.Type,omitempty" json:"ApiError.Type,omitempty"`
}

type ApiException struct {
	XMLName xml.Name `xml:"https://adwords.google.com/api/adwords/cm/v201809 ApiExceptionFault"`

	*ApplicationException

	//
	// List of errors.
	//
	Errors []*ApiError `xml:"errors,omitempty" json:"errors,omitempty"`
}

type ApplicationException struct {

	//
	// Error message.
	//
	Message string `xml:"message,omitempty" json:"message,omitempty"`

	//
	// Indicates that this instance is a subtype of ApplicationException.
	// Although this field is returned in the response, it is ignored on input
	// and cannot be selected. Specify xsi:type instead.
	//
	ApplicationException_Type string `xml:"ApplicationException.Type,omitempty" json:"ApplicationException.Type,omitempty"`
}

type LabelAttribute struct {

	//
	// Indicates that this instance is a subtype of LabelAttribute.
	// Although this field is returned in the response, it is ignored on input
	// and cannot be selected. Specify xsi:type instead.
	//
	LabelAttribute_Type string `xml:"LabelAttribute.Type,omitempty" json:"LabelAttribute.Type,omitempty"`
}

type AuthenticationError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *AuthenticationError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type AuthorizationError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *AuthorizationError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type BiddingErrors struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *BiddingErrors_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type BiddingScheme struct {

	//
	// Indicates that this instance is a subtype of BiddingScheme.
	// Although this field is returned in the response, it is ignored on input
	// and cannot be selected. Specify xsi:type instead.
	//
	BiddingScheme_Type string `xml:"BiddingScheme.Type,omitempty" json:"BiddingScheme.Type,omitempty"`
}

type BiddingStrategyConfiguration struct {

	//
	// Id of the bidding strategy to be associated with the campaign, ad group or ad group criteria. A
	// bidding strategy is created using the BiddingStrategyService ADD operation and is assigned a
	// BiddingStrategyId. The BiddingStrategyId can be shared across campaigns, ad groups and ad group
	// criteria.
	//
	// <p>Starting with v201705, this field cannot be set at the ad group or ad group criterion level.
	// <span class="constraint Selectable">This field can be selected using the value "BiddingStrategyId".</span><span class="constraint Filterable">This field can be filtered on.</span>
	// <span class="constraint AdxEnabled">This is disabled for AdX.</span>
	//
	BiddingStrategyId int64 `xml:"biddingStrategyId,omitempty" json:"biddingStrategyId,omitempty"`

	//
	// Name of the bidding strategy. This is applicable only for flexible bidding strategies.
	// <span class="constraint Selectable">This field can be selected using the value "BiddingStrategyName".</span><span class="constraint Filterable">This field can be filtered on.</span>
	// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
	//
	BiddingStrategyName string `xml:"biddingStrategyName,omitempty" json:"biddingStrategyName,omitempty"`

	//
	// The type of the bidding strategy to be attached.
	//
	// <p>For details on portfolio vs. standard availability, see the <a
	// href="https://developers.google.com/adwords/api/docs/guides/bidding">bidding guide</a>.
	//
	// <p>Starting with v201705, this field cannot be set at the ad group or ad group criterion level
	// to any value other than {@code BiddingStrategyType.NONE}.
	// <span class="constraint Selectable">This field can be selected using the value "BiddingStrategyType".</span><span class="constraint Filterable">This field can be filtered on.</span>
	// <span class="constraint CampaignType">This field may only be set to the values: MANUAL_CPC, PAGE_ONE_PROMOTED, TARGET_SPEND, TARGET_CPA, TARGET_ROAS, MAXIMIZE_CONVERSION_VALUE, MAXIMIZE_CONVERSIONS, TARGET_OUTRANK_SHARE for campaign channel type SEARCH.</span>
	// <span class="constraint CampaignType">This field may only be set to the values: MANUAL_CPC, PAGE_ONE_PROMOTED, TARGET_SPEND, TARGET_CPA, TARGET_ROAS, MAXIMIZE_CONVERSION_VALUE, MAXIMIZE_CONVERSIONS, TARGET_OUTRANK_SHARE for campaign channel type SEARCH with campaign channel subtype SEARCH_EXPRESS.</span>
	// <span class="constraint CampaignType">This field may only be set to the values: MANUAL_CPC, TARGET_ROAS, TARGET_SPEND for campaign channel type SHOPPING.</span>
	// <span class="constraint CampaignType">This field may only be set to MAXIMIZE_CONVERSION_VALUE for campaign channel type SHOPPING with campaign channel subtype SHOPPING_GOAL_OPTIMIZED_ADS.</span>
	// <span class="constraint CampaignType">This field may only be set to the values: MANUAL_CPC, MANUAL_CPM, TARGET_SPEND, TARGET_CPA, TARGET_ROAS, MAXIMIZE_CONVERSIONS for campaign channel type DISPLAY.</span>
	// <span class="constraint CampaignType">This field may only be set to the values: MANUAL_CPC, TARGET_CPA for campaign channel type DISPLAY with campaign channel subtype DISPLAY_MOBILE_APP.</span>
	// <span class="constraint CampaignType">This field may only be set to the values: MANUAL_CPC, MAXIMIZE_CONVERSIONS, PAGE_ONE_PROMOTED, TARGET_CPA, TARGET_OUTRANK_SHARE, TARGET_ROAS, TARGET_SPEND for campaign channel subtype SEARCH_MOBILE_APP.</span>
	// <span class="constraint CampaignType">This field may only be set to the values: TARGET_CPA, TARGET_ROAS, MAXIMIZE_CONVERSIONS for campaign channel type MULTI_CHANNEL with campaign channel subtype UNIVERSAL_APP_CAMPAIGN.</span>
	// <span class="constraint CampaignType">This field may only be set to the values: TARGET_ROAS, TARGET_CPA, MAXIMIZE_CONVERSIONS for campaign channel type DISPLAY with campaign channel subtype DISPLAY_SMART_CAMPAIGN.</span>
	// <span class="constraint CampaignType">This field may only be set to the values: MANUAL_CPC, TARGET_CPA, TARGET_ROAS, MAXIMIZE_CONVERSIONS for campaign channel type DISPLAY with campaign channel subtype DISPLAY_GMAIL_AD.</span>
	//
	BiddingStrategyType *BiddingStrategyType `xml:"biddingStrategyType,omitempty" json:"biddingStrategyType,omitempty"`

	//
	// Indicates where the bidding strategy is associated i.e. campaign, ad group or
	// ad group criterion.
	// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
	//
	BiddingStrategySource *BiddingStrategySource `xml:"biddingStrategySource,omitempty" json:"biddingStrategySource,omitempty"`

	//
	// The bidding strategy metadata. Bidding strategy can be associated using the {@linkplain
	// BiddingStrategyConfiguration#biddingStrategyType} or the bidding scheme.
	//
	// <p>For details on portfolio vs. standard availability, see the <a
	// href="https://developers.google.com/adwords/api/docs/guides/bidding">bidding guide</a>.
	//
	// <p>Starting with v201705, this field cannot be set at the ad group or ad group criterion level.
	//
	BiddingScheme *BiddingScheme `xml:"biddingScheme,omitempty" json:"biddingScheme,omitempty"`

	//
	// Specifies the bids. Bids can be set only on ad groups and ad group criteria.
	// Bids cannot be set on campaign.
	//
	// Default CPC and CPM bid values will be set if they are not provided during {@linkplain AdGroup}
	// creation. Default CPC and CPM values are minimal billable amounts in local currencies.
	// For example, for US Dollars CPC and CPM default values are $0.01 and $0.01, respectively.
	//
	Bids []*Bids `xml:"bids,omitempty" json:"bids,omitempty"`

	//
	// The target return on average spend (ROAS). This target can only be set on ad groups. If this
	// ad group's effective bidding strategy is a standard {@code TARGET_ROAS} strategy attached to
	// the campaign, then the target overrides the target roas specified in the campaign's bidding
	// strategy. Otherwise, this value is ignored.
	// <span class="constraint InRange">This field must be between 0.01 and 1000.0, inclusive.</span>
	//
	TargetRoasOverride float64 `xml:"targetRoasOverride,omitempty" json:"targetRoasOverride,omitempty"`
}

type Bids struct {

	//
	// Indicates that this instance is a subtype of Bids.
	// Although this field is returned in the response, it is ignored on input
	// and cannot be selected. Specify xsi:type instead.
	//
	Bids_Type string `xml:"Bids.Type,omitempty" json:"Bids.Type,omitempty"`
}

type Budget struct {

	//
	// A Budget is created using the BudgetService ADD operation and is
	// assigned a BudgetId. The BudgetId is used when modifying the
	// Budget with BudgetService, or associating the Budget to a
	// Campaign with CampaignService. A BudgetId can be shared across
	// different campaigns--the system will then allocate the Budget
	// among the Campaigns to get the optimum result.
	// <span class="constraint Selectable">This field can be selected using the value "BudgetId".</span><span class="constraint Filterable">This field can be filtered on.</span>
	//
	BudgetId int64 `xml:"budgetId,omitempty" json:"budgetId,omitempty"`

	//
	// Name of the Budget. When creating a Budget through BudgetService, every explicitly shared
	// Budget must have a non-null non-empty name. In addition, all explicitly shared Budget
	// names owned by an account must be distinct. Budgets that are not explicitly shared derive
	// their name from the attached Campaign's name.
	// <span class="constraint Selectable">This field can be selected using the value "BudgetName".</span>
	// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE.</span>
	// <span class="constraint StringLength">The length of this string should be between 1 and 255, inclusive, in UTF-8 bytes, (trimmed).</span>
	//
	Name string `xml:"name,omitempty" json:"name,omitempty"`

	//
	// Amount of budget in the local currency for the account.
	//
	// This value represents an average daily budget amount; the actual daily costs might
	// vary. See <a href="https://support.google.com/adwords/answer/1704443">Charges
	// and your daily budget</a>.
	// <span class="constraint Selectable">This field can be selected using the value "Amount".</span><span class="constraint Filterable">This field can be filtered on.</span>
	// <span class="constraint InRange">This field must be greater than or equal to 1.</span>
	// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE.</span>
	//
	Amount *Money `xml:"amount,omitempty" json:"amount,omitempty"`

	//
	// Delivery method for the Budget which determines the rate at which the
	// Budget is spent. Defaults to STANDARD and can be changed through
	// BudgetService ADD or SET operations.
	// <span class="constraint Selectable">This field can be selected using the value "DeliveryMethod".</span>
	// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE.</span>
	//
	DeliveryMethod *Budget_BudgetDeliveryMethod `xml:"deliveryMethod,omitempty" json:"deliveryMethod,omitempty"`

	//
	// Number of campaigns actively using this budget. This field is only
	// populated for Get operations.
	// <span class="constraint Selectable">This field can be selected using the value "BudgetReferenceCount".</span><span class="constraint Filterable">This field can be filtered on.</span>
	// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
	//
	ReferenceCount int32 `xml:"referenceCount,omitempty" json:"referenceCount,omitempty"`

	//
	// If true, this budget was created with the purpose of sharing
	// this budget across one or more campaigns.
	// <p>If false, this budget was created with the intention to be
	// dedicatedly used with a single campaign, and the Budget's name
	// and status will stay in the sync with the associated Campaign's name
	// and status. Attempting to share this budget with a second Campaign will
	// result in an error.</p>
	// <span class="constraint Selectable">This field can be selected using the value "IsBudgetExplicitlyShared".</span>
	// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE.</span>
	//
	IsExplicitlyShared bool `xml:"isExplicitlyShared,omitempty" json:"isExplicitlyShared,omitempty"`

	//
	// <span class="constraint Selectable">This field can be selected using the value "BudgetStatus".</span><span class="constraint Filterable">This field can be filtered on.</span>
	// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
	//
	Status *Budget_BudgetStatus `xml:"status,omitempty" json:"status,omitempty"`
}

type BudgetError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *BudgetError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type Campaign struct {

	//
	// ID of this campaign.
	// <span class="constraint Selectable">This field can be selected using the value "Id".</span><span class="constraint Filterable">This field can be filtered on.</span>
	// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: ADD.</span>
	//
	Id int64 `xml:"id,omitempty" json:"id,omitempty"`

	//
	// Id of the campaign group this campaign belongs to.
	// <span class="constraint Selectable">This field can be selected using the value "CampaignGroupId".</span><span class="constraint Filterable">This field can be filtered on.</span>
	//
	CampaignGroupId int64 `xml:"campaignGroupId,omitempty" json:"campaignGroupId,omitempty"`

	//
	// Name of this campaign.
	// This field is required and should not be {@code null} for ADD operations.
	//
	// For SET and REMOVE operations, this can be used to address the campaign
	// by name when the campaign is ENABLED or PAUSED. Removed campaigns cannot
	// be addressed by name. If you wish to rename a campaign, you must provide
	// the ID.
	// <span class="constraint Selectable">This field can be selected using the value "Name".</span><span class="constraint Filterable">This field can be filtered on.</span>
	// <span class="constraint MatchesRegex">Campaign names must not contain any null (code point 0x0), NL line feed (code point 0xA) or carriage return (code point 0xD) characters. This is checked by the regular expression '[^\x00\x0A\x0D]*'.</span>
	// <span class="constraint StringLength">This string must not be empty.</span>
	//
	Name string `xml:"name,omitempty" json:"name,omitempty"`

	//
	// Status of this campaign. On add, defaults to {@code ENABLED}.
	// <span class="constraint Selectable">This field can be selected using the value "Status".</span><span class="constraint Filterable">This field can be filtered on.</span>
	//
	Status *CampaignStatus `xml:"status,omitempty" json:"status,omitempty"`

	//
	// Serving status.
	// <span class="constraint Selectable">This field can be selected using the value "ServingStatus".</span><span class="constraint Filterable">This field can be filtered on.</span>
	// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
	//
	ServingStatus *ServingStatus `xml:"servingStatus,omitempty" json:"servingStatus,omitempty"`

	//
	// Date the campaign begins. On add, defaults to the current day
	// in the parent account's local timezone. The date's format should be YYYYMMDD.
	// <span class="constraint Selectable">This field can be selected using the value "StartDate".</span><span class="constraint Filterable">This field can be filtered on.</span>
	//
	StartDate string `xml:"startDate,omitempty" json:"startDate,omitempty"`

	//
	// Date the campaign ends. On add, defaults to <code>20371230</code>, which means the
	// campaign will run indefinitely. To set an existing campaign to run indefinitely, set this
	// field to <code>203712<b>30</b></code>. The date's format should be YYYYMMDD.
	// <span class="constraint Selectable">This field can be selected using the value "EndDate".</span><span class="constraint Filterable">This field can be filtered on.</span>
	//
	EndDate string `xml:"endDate,omitempty" json:"endDate,omitempty"`

	//
	// Current base budget of campaign; default if no custom budgets are enabled.
	// This field is readonly for draft campaigns and will be ignored when sent to the API.
	//
	Budget *Budget `xml:"budget,omitempty" json:"budget,omitempty"`

	//
	// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
	//
	ConversionOptimizerEligibility *ConversionOptimizerEligibility `xml:"conversionOptimizerEligibility,omitempty" json:"conversionOptimizerEligibility,omitempty"`

	//
	// Ad serving optimization status.
	// <span class="constraint Selectable">This field can be selected using the value "AdServingOptimizationStatus".</span>
	// <span class="constraint CampaignType">This field may only be set to CONVERSION_OPTIMIZE for campaign channel subtype UNIVERSAL_APP_CAMPAIGN.</span>
	// <span class="constraint CampaignType">This field may only be set to CONVERSION_OPTIMIZE for campaign channel type DISPLAY with campaign channel subtype DISPLAY_SMART_CAMPAIGN.</span>
	//
	AdServingOptimizationStatus *AdServingOptimizationStatus `xml:"adServingOptimizationStatus,omitempty" json:"adServingOptimizationStatus,omitempty"`

	//
	// Frequency cap for this campaign.
	// <span class="constraint CampaignType">This field may not be set for campaign channel subtypes: DISPLAY_SMART_CAMPAIGN, UNIVERSAL_APP_CAMPAIGN, SEARCH_MOBILE_APP.</span>
	//
	FrequencyCap *FrequencyCap `xml:"frequencyCap,omitempty" json:"frequencyCap,omitempty"`

	//
	// List of settings for the campaign.
	// <span class="constraint Selectable">This field can be selected using the value "Settings".</span>
	//
	Settings []*Setting `xml:"settings,omitempty" json:"settings,omitempty"`

	//
	// The primary serving target for ads within this campaign. The targeting options can be refined
	// in NetworkSetting. May only be set for new campaigns.
	// This field is required and should not be {@code null} when it is contained within
	// {@link Operator}s : ADD
	// <span class="constraint Selectable">This field can be selected using the value "AdvertisingChannelType".</span><span class="constraint Filterable">This field can be filtered on.</span>
	// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: SET.</span>
	//
	AdvertisingChannelType *AdvertisingChannelType `xml:"advertisingChannelType,omitempty" json:"advertisingChannelType,omitempty"`

	//
	// Optional refinement of advertisingChannelType. Must be a valid sub-type of the parent channel
	// type. May only be set for new campaigns and cannot be changed once set.
	// <span class="constraint Selectable">This field can be selected using the value "AdvertisingChannelSubType".</span><span class="constraint Filterable">This field can be filtered on.</span>
	// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: SET.</span>
	//
	AdvertisingChannelSubType *AdvertisingChannelSubType `xml:"advertisingChannelSubType,omitempty" json:"advertisingChannelSubType,omitempty"`

	//
	// Network settings for the campaign indicating where the campaign will serve.
	//
	NetworkSetting *NetworkSetting `xml:"networkSetting,omitempty" json:"networkSetting,omitempty"`

	//
	// Labels that are attached to the campaign. To associate an existing {@link Label} to an
	// existing {@link Campaign}, use {@link CampaignService#mutateLabel} with the ADD
	// operator. To remove an associated {@link Label} from the {@link Campaign}, use
	// {@link CampaignService#mutateLabel} with the REMOVE operator. To filter on {@link Label}s,
	// use one of {@link Predicate.Operator#CONTAINS_ALL}, {@link Predicate.Operator#CONTAINS_ANY},
	// {@link Predicate.Operator#CONTAINS_NONE} operators with a list of {@link Label} ids.
	// <span class="constraint Selectable">This field can be selected using the value "Labels".</span><span class="constraint Filterable">This field can be filtered on.</span>
	// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE and SET.</span>
	//
	Labels []*Label `xml:"labels,omitempty" json:"labels,omitempty"`

	//
	// Bidding configuration for this campaign. To change an existing campaign's
	// bidding strategy, set the {@link BiddingStrategyConfiguration#biddingStrategyType}
	// or {@link BiddingStrategyConfiguration#biddingScheme}.
	// This field is required and should not be {@code null} when it is contained within
	// {@link Operator}s : ADD
	//
	BiddingStrategyConfiguration *BiddingStrategyConfiguration `xml:"biddingStrategyConfiguration,omitempty" json:"biddingStrategyConfiguration,omitempty"`

	//
	// Indicates if this campaign is a normal campaign, a draft campaign,
	// or a trial campaign.
	// <span class="constraint Selectable">This field can be selected using the value "CampaignTrialType".</span><span class="constraint Filterable">This field can be filtered on.</span>
	// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
	//
	CampaignTrialType *CampaignTrialType `xml:"campaignTrialType,omitempty" json:"campaignTrialType,omitempty"`

	//
	// ID of the base campaign of the draft or trial campaign. For base campaigns, this is equal to
	// the campaign ID.  This field is only returned on get requests.
	// <span class="constraint Selectable">This field can be selected using the value "BaseCampaignId".</span><span class="constraint Filterable">This field can be filtered on.</span>
	// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
	//
	BaseCampaignId int64 `xml:"baseCampaignId,omitempty" json:"baseCampaignId,omitempty"`

	//
	// This Map provides a place to put new features and settings in older versions
	// of the AdWords API in the rare instance we need to introduce a new feature in
	// an older version.
	//
	// It is presently unused.  Do not set a value.
	//
	ForwardCompatibilityMap []*String_StringMapEntry `xml:"forwardCompatibilityMap,omitempty" json:"forwardCompatibilityMap,omitempty"`

	//
	// URL template for constructing a tracking URL.
	//
	// <p>On update, empty string ("") indicates to clear the field.
	// <span class="constraint Selectable">This field can be selected using the value "TrackingUrlTemplate".</span><span class="constraint Filterable">This field can be filtered on.</span>
	// <span class="constraint CampaignType">This field may not be set for campaign channel subtype UNIVERSAL_APP_CAMPAIGN.</span>
	//
	TrackingUrlTemplate string `xml:"trackingUrlTemplate,omitempty" json:"trackingUrlTemplate,omitempty"`

	//
	// URL template for appending params to Final URL.
	//
	// <p>On update, empty string ("") indicates to clear the field.
	// <span class="constraint Selectable">This field can be selected using the value "FinalUrlSuffix".</span><span class="constraint Filterable">This field can be filtered on.</span>
	// <span class="constraint CampaignType">This field may not be set for campaign channel type MULTI_CHANNEL.</span>
	//
	FinalUrlSuffix string `xml:"finalUrlSuffix,omitempty" json:"finalUrlSuffix,omitempty"`

	//
	// A list of mappings to be used for substituting URL custom parameter tags in the
	// trackingUrlTemplate, finalUrls, and/or finalMobileUrls.
	// <span class="constraint Selectable">This field can be selected using the value "UrlCustomParameters".</span>
	// <span class="constraint CampaignType">This field may not be set for campaign channel subtype UNIVERSAL_APP_CAMPAIGN.</span>
	//
	UrlCustomParameters *CustomParameters `xml:"urlCustomParameters,omitempty" json:"urlCustomParameters,omitempty"`

	//
	// Describes how unbranded pharma ads will be displayed.
	// <span class="constraint CampaignType">This field may not be set for campaign channel subtype UNIVERSAL_APP_CAMPAIGN.</span>
	//
	VanityPharma *VanityPharma `xml:"vanityPharma,omitempty" json:"vanityPharma,omitempty"`

	//
	// Stores information specific to Universal App Campaigns.
	// <span class="constraint CampaignType">This field may only be set for campaign channel type MULTI_CHANNEL.</span>
	//
	UniversalAppCampaignInfo *UniversalAppCampaignInfo `xml:"universalAppCampaignInfo,omitempty" json:"universalAppCampaignInfo,omitempty"`

	//
	// Selective optimization setting for this campaign, which includes a set of conversion
	// types to optimize this campaign towards.
	// <span class="constraint Selectable">This field can be selected using the value "SelectiveOptimization".</span>
	//
	SelectiveOptimization *SelectiveOptimization `xml:"selectiveOptimization,omitempty" json:"selectiveOptimization,omitempty"`
}

type CampaignError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *CampaignError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type CampaignLabel struct {

	//
	// The id of the campaign that the label is applied to.
	// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD, REMOVE.</span>
	//
	CampaignId int64 `xml:"campaignId,omitempty" json:"campaignId,omitempty"`

	//
	// The id of an existing label to be applied to the campaign.
	// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD, REMOVE.</span>
	//
	LabelId int64 `xml:"labelId,omitempty" json:"labelId,omitempty"`
}

type CampaignLabelOperation struct {
	*Operation

	//
	// CampaignLabel to operate on.
	// <span class="constraint Required">This field is required and should not be {@code null}.</span>
	//
	Operand *CampaignLabel `xml:"operand,omitempty" json:"operand,omitempty"`
}

type CampaignLabelReturnValue struct {
	*ListReturnValue

	Value []*CampaignLabel `xml:"value,omitempty" json:"value,omitempty"`

	PartialFailureErrors []*ApiError `xml:"partialFailureErrors,omitempty" json:"partialFailureErrors,omitempty"`
}

type TextLabel struct {
	*Label
}

type DisplayAttribute struct {
	*LabelAttribute

	//
	// Background color of the label in RGB format.
	// <span class="constraint MatchesRegex">A background color string must begin with a '#' character followed by either 6 or 3 hexadecimal characters (24 vs. 12 bits). This is checked by the regular expression '^\#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$'.</span>
	//
	BackgroundColor string `xml:"backgroundColor,omitempty" json:"backgroundColor,omitempty"`

	//
	// A short description of the label.
	// <span class="constraint StringLength">The length of this string should be between 0 and 200, inclusive.</span>
	//
	Description string `xml:"description,omitempty" json:"description,omitempty"`
}

type CampaignOperation struct {
	*Operation

	//
	// <span class="constraint Required">This field is required and should not be {@code null}.</span>
	//
	Operand *Campaign `xml:"operand,omitempty" json:"operand,omitempty"`
}

type CampaignPage struct {
	*Page

	//
	// The result entries in this page.
	//
	Entries []*Campaign `xml:"entries,omitempty" json:"entries,omitempty"`
}

type CampaignReturnValue struct {
	*ListReturnValue

	Value []*Campaign `xml:"value,omitempty" json:"value,omitempty"`

	//
	// List of partial failure errors.
	//
	PartialFailureErrors []*ApiError `xml:"partialFailureErrors,omitempty" json:"partialFailureErrors,omitempty"`
}

type CertificateDomainMismatchConstraint struct {
	*PolicyTopicConstraint
}

type CertificateDomainMismatchInCountryConstraint struct {
	*CountryConstraint
}

type CertificateMissingConstraint struct {
	*PolicyTopicConstraint
}

type CertificateMissingInCountryConstraint struct {
	*CountryConstraint
}

type ClientTermsError struct {
	*ApiError

	Reason *ClientTermsError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ComparableValue struct {

	//
	// Indicates that this instance is a subtype of ComparableValue.
	// Although this field is returned in the response, it is ignored on input
	// and cannot be selected. Specify xsi:type instead.
	//
	ComparableValue_Type string `xml:"ComparableValue.Type,omitempty" json:"ComparableValue.Type,omitempty"`
}

type ConversionOptimizerEligibility struct {

	//
	// If the campaign is eligible to enter conversion optimizer.
	// <span class="constraint Selectable">This field can be selected using the value "Eligible".</span>
	// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
	//
	Eligible bool `xml:"eligible,omitempty" json:"eligible,omitempty"`

	//
	// Reason why a campaign would be rejected for conversion optimizer.
	// <span class="constraint Selectable">This field can be selected using the value "RejectionReasons".</span>
	// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
	//
	RejectionReasons []*ConversionOptimizerEligibility_RejectionReason `xml:"rejectionReasons,omitempty" json:"rejectionReasons,omitempty"`
}

type CountryConstraint struct {
	*PolicyTopicConstraint

	//
	// The set of targeted country criterion IDs to which a policy topic entry applies.
	//
	ConstrainedCountries []int64 `xml:"constrainedCountries,omitempty" json:"constrainedCountries,omitempty"`

	//
	// The total number of targeted countries.
	//
	TotalTargetedCountries int32 `xml:"totalTargetedCountries,omitempty" json:"totalTargetedCountries,omitempty"`
}

type CpaBid struct {
	*Bids

	//
	// Target cost per acquisition (CPA). This is applicable only at the ad group level.
	//
	// <p>If an ad group-level target is not set and the strategy type is TARGET_CPA,
	// the strategy level target will be used. To set the strategy-level target,
	// set the {@linkplain TargetCpaBiddingScheme#targetCpa} on the strategy's
	// {@linkplain BiddingStrategyConfiguration#biddingScheme}.
	//
	Bid *Money `xml:"bid,omitempty" json:"bid,omitempty"`

	//
	// The level (ad group, ad group strategy, or campaign strategy) at which the bid was set.
	// This is applicable only at the ad group level.
	// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
	//
	BidSource *BidSource `xml:"bidSource,omitempty" json:"bidSource,omitempty"`
}

type CpcBid struct {
	*Bids

	//
	// Max CPC (cost per click) bid.
	// At the ad group level, this represents the default bid applicable for
	// <ul><li>keyword targeting on search network.</li>
	// <li>keywords & placements for content targeting.</li></ul>
	// At the ad group criteria level, this is the max cpc bid.
	//
	Bid *Money `xml:"bid,omitempty" json:"bid,omitempty"`

	//
	// The level (ad group or criterion) at which the bid was set. This is applicable
	// only at the criteria level.
	// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
	//
	CpcBidSource *BidSource `xml:"cpcBidSource,omitempty" json:"cpcBidSource,omitempty"`
}

type CpmBid struct {
	*Bids

	//
	// Max CPM (cost per thousand impressions) bid.
	//
	Bid *Money `xml:"bid,omitempty" json:"bid,omitempty"`

	//
	// The level (ad group or criterion) at which the bid was set. This is applicable
	// only at the criteria level.
	// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
	//
	CpmBidSource *BidSource `xml:"cpmBidSource,omitempty" json:"cpmBidSource,omitempty"`
}

type CustomParameter struct {

	//
	// The parameter key to be mapped.
	// <span class="constraint Required">This field is required and should not be {@code null}.</span>
	// <span class="constraint StringLength">The length of this string should be between 1 and 16, inclusive, in UTF-8 bytes, (trimmed).</span>
	//
	Key string `xml:"key,omitempty" json:"key,omitempty"`

	//
	// The value this parameter should be mapped to. It should be null if isRemove is true.
	// <span class="constraint StringLength">The length of this string should be between 0 and 250, inclusive, in UTF-8 bytes, (trimmed).</span>
	//
	Value string `xml:"value,omitempty" json:"value,omitempty"`

	//
	// On SET operation, indicates that the parameter should be removed from the existing parameters.
	// If set to true, the value field must be null.
	//
	IsRemove bool `xml:"isRemove,omitempty" json:"isRemove,omitempty"`
}

type CustomParameters struct {

	//
	// The list of custom parameters.
	//
	// <p>On update, all parameters can be cleared by providing an empty or null list and setting
	// doReplace to true.
	//
	Parameters []*CustomParameter `xml:"parameters,omitempty" json:"parameters,omitempty"`

	//
	// On SET operation, indicates that the current parameters should be cleared and replaced
	// with these parameters.
	//
	DoReplace bool `xml:"doReplace,omitempty" json:"doReplace,omitempty"`
}

type DatabaseError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *DatabaseError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type DateError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *DateError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type DateRange struct {

	//
	// the lower bound of this date range, inclusive.
	//
	Min string `xml:"min,omitempty" json:"min,omitempty"`

	//
	// the upper bound of this date range, inclusive.
	//
	Max string `xml:"max,omitempty" json:"max,omitempty"`
}

type DateRangeError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *DateRangeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type DistinctError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *DistinctError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type DoubleValue struct {
	*NumberValue

	//
	// the underlying double value.
	//
	Number float64 `xml:"number,omitempty" json:"number,omitempty"`
}

type DynamicSearchAdsSetting struct {
	*Setting

	//
	// The Internet domain name that this setting represents. E.g. "google.com" or "www.google.com".
	// <span class="constraint Required">This field is required and should not be {@code null}.</span>
	//
	DomainName string `xml:"domainName,omitempty" json:"domainName,omitempty"`

	//
	// A language code that indicates what language the contents of the domain is in. E.g. "en"
	// <span class="constraint Required">This field is required and should not be {@code null}.</span>
	//
	LanguageCode string `xml:"languageCode,omitempty" json:"languageCode,omitempty"`

	//
	// A toggle for the advertiser to decide if they want this campaign to use the advertiser supplied
	// URLs only.
	//
	UseSuppliedUrlsOnly bool `xml:"useSuppliedUrlsOnly,omitempty" json:"useSuppliedUrlsOnly,omitempty"`

	//
	// Page feeds associated with this campaign.
	//
	PageFeed *PageFeed `xml:"pageFeed,omitempty" json:"pageFeed,omitempty"`
}

type EntityAccessDenied struct {
	*ApiError

	//
	// Reason for this error.
	//
	Reason *EntityAccessDenied_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type EntityCountLimitExceeded struct {
	*ApiError

	//
	// Specifies which level's limit was exceeded.
	//
	Reason *EntityCountLimitExceeded_Reason `xml:"reason,omitempty" json:"reason,omitempty"`

	//
	// Id of the entity whose limit was exceeded.
	//
	EnclosingId string `xml:"enclosingId,omitempty" json:"enclosingId,omitempty"`

	//
	// The limit which was exceeded.
	//
	Limit int32 `xml:"limit,omitempty" json:"limit,omitempty"`

	//
	// The account limit type which was exceeded.
	//
	AccountLimitType string `xml:"accountLimitType,omitempty" json:"accountLimitType,omitempty"`

	//
	// The count of existing entities.
	//
	ExistingCount int32 `xml:"existingCount,omitempty" json:"existingCount,omitempty"`
}

type EntityNotFound struct {
	*ApiError

	//
	// Reason for this error.
	//
	Reason *EntityNotFound_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type FieldPathElement struct {

	//
	// The name of a field in lower camelcase. (e.g. "biddingStrategy")
	//
	Field string `xml:"field,omitempty" json:"field,omitempty"`

	//
	// For list fields, this is a 0-indexed position in the list. Null for non-list fields.
	//
	Index int32 `xml:"index,omitempty" json:"index,omitempty"`
}

type ForwardCompatibilityError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *ForwardCompatibilityError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type FrequencyCap struct {

	//
	// Maximum number of impressions allowed during the time range by this cap.
	// To remove the frequency cap on a campaign, set this field to {@code 0}.
	// <span class="constraint Selectable">This field can be selected using the value "FrequencyCapMaxImpressions".</span><span class="constraint Filterable">This field can be filtered on.</span>
	//
	Impressions int64 `xml:"impressions,omitempty" json:"impressions,omitempty"`

	//
	// Unit of time the cap is defined at.
	// Only the Day, Week and Month time units are supported.
	// <span class="constraint Selectable">This field can be selected using the value "TimeUnit".</span><span class="constraint Filterable">This field can be filtered on.</span>
	//
	TimeUnit *TimeUnit `xml:"timeUnit,omitempty" json:"timeUnit,omitempty"`

	//
	// The level on which the cap is to be applied (creative/adgroup).
	// Cap is applied to all the entities of this level in the campaign.
	// <span class="constraint Selectable">This field can be selected using the value "Level".</span><span class="constraint Filterable">This field can be filtered on.</span>
	//
	Level *Level `xml:"level,omitempty" json:"level,omitempty"`
}

type GeoTargetTypeSetting struct {
	*Setting

	//
	// The setting used for positive geotargeting in this particular campaign.
	//
	// <p>Again, the campaign can be positively targeted based on the location user searched for, or
	// solely Physical Location, or either Location of Interest or Physical Location. Positive
	// targeting triggers ads <i>only</i> for users whose location is related to the given locations.
	//
	// <p>The default value is DONT_CARE.
	//
	PositiveGeoTargetType *GeoTargetTypeSetting_PositiveGeoTargetType `xml:"positiveGeoTargetType,omitempty" json:"positiveGeoTargetType,omitempty"`

	//
	// The setting used for negative geotargeting in this particular campaign.
	//
	// <p>The campaign can be negatively targeted using both Physical Location and Location of
	// Interest, or only based on where the user is located. Negative targeting triggers ads for
	// <i>all</i> users <i>except</i> those whose location is related to the given locations.
	//
	// <p>The default value is DONT_CARE.
	//
	NegativeGeoTargetType *GeoTargetTypeSetting_NegativeGeoTargetType `xml:"negativeGeoTargetType,omitempty" json:"negativeGeoTargetType,omitempty"`
}

type IdError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *IdError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type InternalApiError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *InternalApiError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type Label struct {

	//
	// Id of label.
	// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : SET, REMOVE.</span>
	//
	Id int64 `xml:"id,omitempty" json:"id,omitempty"`

	//
	// Name of label.
	// <span class="constraint StringLength">The length of this string should be between 1 and 80, inclusive.</span>
	//
	Name string `xml:"name,omitempty" json:"name,omitempty"`

	//
	// Status of the label.
	// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
	//
	Status *Label_Status `xml:"status,omitempty" json:"status,omitempty"`

	//
	// Attributes of the label.
	// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE.</span>
	//
	Attribute *LabelAttribute `xml:"attribute,omitempty" json:"attribute,omitempty"`

	//
	// Indicates that this instance is a subtype of Label.
	// Although this field is returned in the response, it is ignored on input
	// and cannot be selected. Specify xsi:type instead.
	//
	Label_Type string `xml:"Label.Type,omitempty" json:"Label.Type,omitempty"`
}

type ListError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *ListError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ListOperations struct {

	//
	// Indicates that all contents of the list should be deleted. If this is true, the list will be
	// cleared first, then proceed to the operators.
	//
	Clear bool `xml:"clear,omitempty" json:"clear,omitempty"`

	//
	// The desired behavior of each element in the POJO list that this ListOperation corresponds to.
	// This will contain the same number of elements as the corresponding List<>.
	//
	Operators []*ListOperations_ListOperator `xml:"operators,omitempty" json:"operators,omitempty"`
}

type ListReturnValue struct {

	//
	// Indicates that this instance is a subtype of ListReturnValue.
	// Although this field is returned in the response, it is ignored on input
	// and cannot be selected. Specify xsi:type instead.
	//
	ListReturnValue_Type string `xml:"ListReturnValue.Type,omitempty" json:"ListReturnValue.Type,omitempty"`
}

type LongValue struct {
	*NumberValue

	//
	// the underlying long value.
	//
	Number int64 `xml:"number,omitempty" json:"number,omitempty"`
}

type ManualCpcBiddingScheme struct {
	*BiddingScheme

	//
	// The enhanced CPC bidding option for the campaign, which enables
	// bids to be enhanced based on conversion optimizer data. For more
	// information about enhanced CPC, see the
	// <a href="//support.google.com/adwords/answer/2464964"
	// >AdWords Help Center</a>.
	// <span class="constraint Selectable">This field can be selected using the value "EnhancedCpcEnabled".</span><span class="constraint Filterable">This field can be filtered on.</span>
	//
	EnhancedCpcEnabled bool `xml:"enhancedCpcEnabled,omitempty" json:"enhancedCpcEnabled,omitempty"`
}

type ManualCpmBiddingScheme struct {
	*BiddingScheme

	//
	// This read-only field denotes whether Viewable CPM is enabled, and is computed based on the
	// advertising channel type and subtype. Null unless the bidding strategy type is CPM. Only
	// selectable in CampaignService, using the value ViewableCpmEnabled.
	// <span class="constraint Selectable">This field can be selected using the value "ViewableCpmEnabled".</span><span class="constraint Filterable">This field can be filtered on.</span>
	// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
	//
	ViewableCpmEnabled bool `xml:"viewableCpmEnabled,omitempty" json:"viewableCpmEnabled,omitempty"`
}

type MaximizeConversionValueBiddingScheme struct {
	*BiddingScheme

	//
	// The target return on ad spend (ROAS). This is optional. If set, the bid strategy will
	// maximize revenue while averaging the target return on ad spend. If the target ROAS is high,
	// the bid strategy may not be able to spend the full budget. If the target ROAS is not set, the
	// bid strategy will aim to achieve the highest possible ROAS for the budget. Use {@code 0.0} to
	// clear an existing value.
	// <span class="constraint Selectable">This field can be selected using the value "MaximizeConversionValueTargetRoas".</span><span class="constraint Filterable">This field can be filtered on.</span>
	// <span class="constraint CampaignType">This field may only be set for campaign channel subtype SHOPPING_GOAL_OPTIMIZED_ADS.</span>
	// <span class="constraint InRange">This field must be between 0.01 and 1000.0, inclusive.</span>
	//
	TargetRoas float64 `xml:"targetRoas,omitempty" json:"targetRoas,omitempty"`
}

type MaximizeConversionsBiddingScheme struct {
	*BiddingScheme
}

type Money struct {
	*ComparableValue

	//
	// Amount in micros. One million is equivalent to one unit.
	//
	MicroAmount int64 `xml:"microAmount,omitempty" json:"microAmount,omitempty"`
}

type UniversalAppCampaignSetting struct {
	*Setting

	//
	// A string that uniquely identifies a mobile application. The appId should be the same as the
	// vendor native id for the app. For example the Android Application "Color Drips"
	// (https://play.google.com/store/apps/details?id=com.labpixies.colordrips) would have the appId -
	// "com.labpixies.colordrips".
	// <span class="constraint Filterable">This field can be filtered on using the value "UniversalAppCampaignSettingAppId".</span>
	// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE.</span>
	// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
	//
	AppId string `xml:"appId,omitempty" json:"appId,omitempty"`

	//
	// The vendor, i.e. application store that distributes this specific app, as identified by the
	// app_id.
	// <p>This field is required and should not be null when it is contained within Operators : ADD.
	// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API for the following {@link Operator}s: REMOVE.</span>
	//
	AppVendor *MobileApplicationVendor `xml:"appVendor,omitempty" json:"appVendor,omitempty"`

	//
	// A description line of your mobile application promotion ad(s).
	// <span class="constraint MatchesRegex">Description must not contain any '{' or '}' characters. This is checked by the regular expression '[^\{\}]*'.</span>
	// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
	// <span class="constraint StringLength">The length of this string should be between 1 and 25, inclusive, (trimmed).</span>
	//
	Description1 string `xml:"description1,omitempty" json:"description1,omitempty"`

	//
	// A description line of your mobile application promotion ad(s).
	// <span class="constraint MatchesRegex">Description must not contain any '{' or '}' characters. This is checked by the regular expression '[^\{\}]*'.</span>
	// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
	// <span class="constraint StringLength">The length of this string should be between 1 and 25, inclusive, (trimmed).</span>
	//
	Description2 string `xml:"description2,omitempty" json:"description2,omitempty"`

	//
	// A description line of your mobile application promotion ad(s).
	// <span class="constraint MatchesRegex">Description must not contain any '{' or '}' characters. This is checked by the regular expression '[^\{\}]*'.</span>
	// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
	// <span class="constraint StringLength">The length of this string should be between 1 and 25, inclusive, (trimmed).</span>
	//
	Description3 string `xml:"description3,omitempty" json:"description3,omitempty"`

	//
	// A description line of your mobile application promotion ad(s).
	// <span class="constraint MatchesRegex">Description must not contain any '{' or '}' characters. This is checked by the regular expression '[^\{\}]*'.</span>
	// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
	// <span class="constraint StringLength">The length of this string should be between 1 and 25, inclusive, (trimmed).</span>
	//
	Description4 string `xml:"description4,omitempty" json:"description4,omitempty"`

	//
	// MediaIds for YouTube videos to be shown to users when advertising on video networks.
	//
	YoutubeVideoMediaIds []int64 `xml:"youtubeVideoMediaIds,omitempty" json:"youtubeVideoMediaIds,omitempty"`

	//
	// MediaIds for landscape images to be used in creatives to be shown to users when advertising on
	// display networks.
	//
	ImageMediaIds []int64 `xml:"imageMediaIds,omitempty" json:"imageMediaIds,omitempty"`

	//
	// Represents the goal towards which the bidding strategy, of this universal app campaign, should
	// optimize for.
	//
	UniversalAppBiddingStrategyGoalType *UniversalAppBiddingStrategyGoalType `xml:"universalAppBiddingStrategyGoalType,omitempty" json:"universalAppBiddingStrategyGoalType,omitempty"`

	//
	// Operations for YouTube Video MediaIds.
	//
	YoutubeVideoMediaIdsOps *ListOperations `xml:"youtubeVideoMediaIdsOps,omitempty" json:"youtubeVideoMediaIdsOps,omitempty"`

	//
	// Operations for Image MediaIds.
	//
	ImageMediaIdsOps *ListOperations `xml:"imageMediaIdsOps,omitempty" json:"imageMediaIdsOps,omitempty"`

	//
	// Ads policy decisions associated with asset(s).
	//
	AdsPolicyDecisions []*UniversalAppCampaignAdsPolicyDecisions `xml:"adsPolicyDecisions,omitempty" json:"adsPolicyDecisions,omitempty"`
}

type NetworkSetting struct {

	//
	// Ads will be served with Google.com search results.
	// <span class="constraint Selectable">This field can be selected using the value "TargetGoogleSearch".</span><span class="constraint Filterable">This field can be filtered on.</span>
	// <span class="constraint AdxEnabled">This is disabled for AdX.</span>
	// <span class="constraint CampaignType">This field may only be set to true for campaign channel types: SEARCH, MULTI_CHANNEL.</span>
	// <span class="constraint CampaignType">This field may only be set to false for campaign channel type DISPLAY.</span>
	// <span class="constraint CampaignType">This field may only be set to true for campaign channel subtype SHOPPING_GOAL_OPTIMIZED_ADS.</span>
	//
	TargetGoogleSearch bool `xml:"targetGoogleSearch,omitempty" json:"targetGoogleSearch,omitempty"`

	//
	// Ads will be served on partner sites in the Google Search Network
	// (requires {@code GOOGLE_SEARCH}).
	// <span class="constraint Selectable">This field can be selected using the value "TargetSearchNetwork".</span><span class="constraint Filterable">This field can be filtered on.</span>
	// <span class="constraint AdxEnabled">This is disabled for AdX.</span>
	// <span class="constraint CampaignType">This field may only be set to true for campaign channel type MULTI_CHANNEL.</span>
	// <span class="constraint CampaignType">This field may only be set to true for campaign channel subtype SHOPPING_GOAL_OPTIMIZED_ADS.</span>
	//
	TargetSearchNetwork bool `xml:"targetSearchNetwork,omitempty" json:"targetSearchNetwork,omitempty"`

	//
	// Ads will be served on specified placements in the Google Display Network.
	// Placements are specified using {@code Placement} criteria.
	// <span class="constraint Selectable">This field can be selected using the value "TargetContentNetwork".</span><span class="constraint Filterable">This field can be filtered on.</span>
	// <span class="constraint CampaignType">This field may only be set to true for campaign channel type MULTI_CHANNEL.</span>
	// <span class="constraint CampaignType">This field may only be set to false for campaign channel subtype SEARCH_MOBILE_APP.</span>
	// <span class="constraint CampaignType">This field may only be set to true for campaign channel type DISPLAY with campaign channel subtype DISPLAY_SMART_CAMPAIGN.</span>
	// <span class="constraint CampaignType">This field may only be set to true for campaign channel subtype SHOPPING_GOAL_OPTIMIZED_ADS.</span>
	//
	TargetContentNetwork bool `xml:"targetContentNetwork,omitempty" json:"targetContentNetwork,omitempty"`

	//
	// Ads will be served on the Google Partner Network. This is available to
	// only some specific Google partner accounts.
	// <span class="constraint Selectable">This field can be selected using the value "TargetPartnerSearchNetwork".</span><span class="constraint Filterable">This field can be filtered on.</span>
	// <span class="constraint AdxEnabled">This is disabled for AdX.</span>
	// <span class="constraint CampaignType">This field may only be set to false for campaign channel type MULTI_CHANNEL.</span>
	//
	TargetPartnerSearchNetwork bool `xml:"targetPartnerSearchNetwork,omitempty" json:"targetPartnerSearchNetwork,omitempty"`
}

type NewEntityCreationError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *NewEntityCreationError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type NotEmptyError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *NotEmptyError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type NullError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *NullError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type NumberValue struct {
	*ComparableValue
}

type Operation struct {

	//
	// Operator.
	// <span class="constraint Required">This field is required and should not be {@code null}.</span>
	//
	Operator *Operator `xml:"operator,omitempty" json:"operator,omitempty"`

	//
	// Indicates that this instance is a subtype of Operation.
	// Although this field is returned in the response, it is ignored on input
	// and cannot be selected. Specify xsi:type instead.
	//
	Operation_Type string `xml:"Operation.Type,omitempty" json:"Operation.Type,omitempty"`
}

type OperationAccessDenied struct {
	*ApiError

	Reason *OperationAccessDenied_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type OperatorError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *OperatorError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type OrderBy struct {

	//
	// The field to sort the results on.
	// <span class="constraint Required">This field is required and should not be {@code null}.</span>
	//
	Field string `xml:"field,omitempty" json:"field,omitempty"`

	//
	// The order to sort the results on. The default sort order is {@link SortOrder#ASCENDING}.
	//
	SortOrder *SortOrder `xml:"sortOrder,omitempty" json:"sortOrder,omitempty"`
}

type Page struct {

	//
	// Total number of entries in the result that this page is a part of.
	//
	TotalNumEntries int32 `xml:"totalNumEntries,omitempty" json:"totalNumEntries,omitempty"`

	//
	// Indicates that this instance is a subtype of Page.
	// Although this field is returned in the response, it is ignored on input
	// and cannot be selected. Specify xsi:type instead.
	//
	Page_Type string `xml:"Page.Type,omitempty" json:"Page.Type,omitempty"`
}

type PageFeed struct {

	//
	// A list of page feeds associated with this campaign's dynamic search ads setting.
	//
	FeedIds []int64 `xml:"feedIds,omitempty" json:"feedIds,omitempty"`
}

type PageOnePromotedBiddingScheme struct {
	*BiddingScheme

	//
	// Specifies the strategy goal: where impressions are desired to be shown on
	// search result pages.
	//
	StrategyGoal *PageOnePromotedBiddingScheme_StrategyGoal `xml:"strategyGoal,omitempty" json:"strategyGoal,omitempty"`

	//
	// Strategy maximum bid limit in advertiser local currency micro units.
	// This upper limit applies to all keywords managed by the strategy.
	// <span class="constraint InRange">This field must be greater than or equal to 0.</span>
	//
	BidCeiling *Money `xml:"bidCeiling,omitempty" json:"bidCeiling,omitempty"`

	//
	// Bid Multiplier to be applied to the relevant bid estimate (depending on the strategyGoal)
	// in determining a keyword's new max cpc bid.
	// <span class="constraint InRange">This field must be greater than or equal to 0.</span>
	//
	BidModifier float64 `xml:"bidModifier,omitempty" json:"bidModifier,omitempty"`

	//
	// Controls whether the strategy always follows bid estimate changes, or only
	// increases. If false, always set a keyword's new bid to the current bid estimate.
	// If true, only updates a keyword's bid if the current bid estimate is
	// greater than the current bid.
	//
	BidChangesForRaisesOnly bool `xml:"bidChangesForRaisesOnly,omitempty" json:"bidChangesForRaisesOnly,omitempty"`

	//
	// Controls whether the strategy is allowed to raise bids when the throttling rate
	// of the budget it is serving out of rises above a threshold.
	//
	RaiseBidWhenBudgetConstrained bool `xml:"raiseBidWhenBudgetConstrained,omitempty" json:"raiseBidWhenBudgetConstrained,omitempty"`

	//
	// Controls whether the strategy is allowed to raise bids on keywords with lower-range
	// quality scores.
	//
	RaiseBidWhenLowQualityScore bool `xml:"raiseBidWhenLowQualityScore,omitempty" json:"raiseBidWhenLowQualityScore,omitempty"`
}

type Paging struct {

	//
	// Index of the first result to return in this page.
	// <span class="constraint InRange">This field must be greater than or equal to 0.</span>
	//
	StartIndex int32 `xml:"startIndex,omitempty" json:"startIndex,omitempty"`

	//
	// Maximum number of results to return in this page. Set this to a reasonable value to limit
	// the number of results returned per page.
	// <span class="constraint InRange">This field must be greater than or equal to 0.</span>
	//
	NumberResults int32 `xml:"numberResults,omitempty" json:"numberResults,omitempty"`
}

type PolicyTopicConstraint struct {
	ConstraintType *PolicyTopicConstraint_PolicyTopicConstraintType `xml:"constraintType,omitempty" json:"constraintType,omitempty"`

	//
	// Indicates that this instance is a subtype of PolicyTopicConstraint.
	// Although this field is returned in the response, it is ignored on input
	// and cannot be selected. Specify xsi:type instead.
	//
	PolicyTopicConstraint_Type string `xml:"PolicyTopicConstraint.Type,omitempty" json:"PolicyTopicConstraint.Type,omitempty"`
}

type PolicyTopicEntry struct {

	//
	// The type of the policy topic entry.
	//
	PolicyTopicEntryType *PolicyTopicEntryType `xml:"policyTopicEntryType,omitempty" json:"policyTopicEntryType,omitempty"`

	//
	// The policy topic evidences associated with this policy topic entry.
	//
	PolicyTopicEvidences []*PolicyTopicEvidence `xml:"policyTopicEvidences,omitempty" json:"policyTopicEvidences,omitempty"`

	//
	// The targeting constraints to which this PolicyTopicEntry is related.
	//
	PolicyTopicConstraints []*PolicyTopicConstraint `xml:"policyTopicConstraints,omitempty" json:"policyTopicConstraints,omitempty"`

	//
	// The policy topic id.
	// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
	//
	PolicyTopicId string `xml:"policyTopicId,omitempty" json:"policyTopicId,omitempty"`

	//
	// The policy topic name (in English).
	// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
	//
	PolicyTopicName string `xml:"policyTopicName,omitempty" json:"policyTopicName,omitempty"`

	//
	// URL of the help center article describing this policy topic entry.
	// <span class="constraint ReadOnly">This field is read only and will be ignored when sent to the API.</span>
	//
	PolicyTopicHelpCenterUrl string `xml:"policyTopicHelpCenterUrl,omitempty" json:"policyTopicHelpCenterUrl,omitempty"`
}

type PolicyTopicEvidence struct {

	//
	// The type of evidence for the policy topic.
	//
	PolicyTopicEvidenceType *PolicyTopicEvidenceType `xml:"policyTopicEvidenceType,omitempty" json:"policyTopicEvidenceType,omitempty"`

	//
	// The actual evidence that triggered this policy topic to be reported. This field is associated
	// with the policyTopicEvidenceType. So for example, when policyTopicEvidenceType is AD_TEXT,
	// the evidence is the texts associated with the Ad.
	//
	EvidenceTextList []string `xml:"evidenceTextList,omitempty" json:"evidenceTextList,omitempty"`

	//
	// The url types that triggered this policy topic to be reported. This field is associated with
	// the policyTopicEvidenceType and will only be populated when it has value of
	// DESTINATION_MISMATCH. So for example, when policyTopicEvidenceType is DESTINATION_MISMATCH,
	// policyTopicEvidenceDestinationMismatchUrlTypes will be populated with mismatched url types,
	// DISPLAY_URL, FINAL_URL and/or FINAL_MOBILE_URL.
	//
	PolicyTopicEvidenceDestinationMismatchUrlTypes []*PolicyTopicEvidenceDestinationMismatchUrlType `xml:"policyTopicEvidenceDestinationMismatchUrlTypes,omitempty" json:"policyTopicEvidenceDestinationMismatchUrlTypes,omitempty"`
}

type Predicate struct {

	//
	// The field by which to filter the returned data. Possible values are marked Filterable on
	// the entity's reference page. For example, for predicates for the
	// CampaignService {@link Selector selector}, refer to the filterable fields from the
	// {@link Campaign} reference page.
	// <span class="constraint Required">This field is required and should not be {@code null}.</span>
	//
	Field string `xml:"field,omitempty" json:"field,omitempty"`

	//
	// The operator to use for filtering the data returned.
	// <span class="constraint Required">This field is required and should not be {@code null}.</span>
	//
	Operator *Predicate_Operator `xml:"operator,omitempty" json:"operator,omitempty"`

	//
	// The values by which to filter the field. The {@link Operator#CONTAINS_ALL},
	// {@link Operator#CONTAINS_ANY}, {@link Operator#CONTAINS_NONE}, {@link Operator#IN}
	// and {@link Operator#NOT_IN} take multiple values. All others take a single value.
	// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
	// <span class="constraint Required">This field is required and should not be {@code null}.</span>
	//
	Values []string `xml:"values,omitempty" json:"values,omitempty"`
}

type QueryError struct {
	*ApiError

	Reason *QueryError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`

	Message string `xml:"message,omitempty" json:"message,omitempty"`
}

type QuotaCheckError struct {
	*ApiError

	Reason *QuotaCheckError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RangeError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *RangeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RateExceededError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *RateExceededError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`

	//
	// Cause of the rate exceeded error.
	//
	RateName string `xml:"rateName,omitempty" json:"rateName,omitempty"`

	//
	// The scope of the rate (ACCOUNT/DEVELOPER).
	//
	RateScope string `xml:"rateScope,omitempty" json:"rateScope,omitempty"`

	//
	// The amount of time (in seconds) the client should wait before retrying the request.
	//
	RetryAfterSeconds int32 `xml:"retryAfterSeconds,omitempty" json:"retryAfterSeconds,omitempty"`
}

type ReadOnlyError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *ReadOnlyError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RealTimeBiddingSetting struct {
	*Setting

	//
	// Whether the campaign is opted in to real-time bidding.
	//
	OptIn bool `xml:"optIn,omitempty" json:"optIn,omitempty"`
}

type RegionCodeError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *RegionCodeError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RejectedError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *RejectedError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RequestError struct {
	*ApiError

	Reason *RequestError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type RequiredError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *RequiredError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ResellerConstraint struct {
	*PolicyTopicConstraint
}

type SelectiveOptimization struct {

	//
	// The selected conversion ids for selective optimization.
	//
	ConversionTypeIds []int64 `xml:"conversionTypeIds,omitempty" json:"conversionTypeIds,omitempty"`

	//
	// The selected conversion ids ops for selective optimization.
	//
	ConversionTypeIdsOps *ListOperations `xml:"conversionTypeIdsOps,omitempty" json:"conversionTypeIdsOps,omitempty"`
}

type Selector struct {

	//
	// List of fields to select.
	// <a href="/adwords/api/docs/appendix/selectorfields">Possible values</a>
	// are marked {@code Selectable} on the entity's reference page.
	// For example, for the {@code CampaignService} selector, refer to the
	// selectable fields from the {@link Campaign} reference page.
	// <span class="constraint ContentsDistinct">This field must contain distinct elements.</span>
	// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
	// <span class="constraint Required">This field is required and should not be {@code null}.</span>
	//
	Fields []string `xml:"fields,omitempty" json:"fields,omitempty"`

	//
	// Specifies how an entity (eg. adgroup, campaign, criterion, ad) should be filtered.
	// <span class="constraint ContentsNotNull">This field must not contain {@code null} elements.</span>
	//
	Predicates []*Predicate `xml:"predicates,omitempty" json:"predicates,omitempty"`

	//
	// Range of dates for which you want to include data. If this value is omitted,
	// results for all dates are returned.
	// <p class="note"><b>Note:</b> This field is only used by the report download
	// service. For all other services, it is ignored.</p>
	// <span class="constraint DateRangeWithinRange">This range must be contained within the range [19700101, 20380101].</span>
	//
	DateRange *DateRange `xml:"dateRange,omitempty" json:"dateRange,omitempty"`

	//
	// The fields on which you want to sort, and the sort order. The order in the list is
	// significant: The first element in the list indicates the primary sort order, the next
	// specifies the secondary sort order and so on.
	//
	Ordering []*OrderBy `xml:"ordering,omitempty" json:"ordering,omitempty"`

	//
	// Pagination information.
	//
	Paging *Paging `xml:"paging,omitempty" json:"paging,omitempty"`
}

type SelectorError struct {
	*ApiError

	//
	// The error reason represented by enum.
	//
	Reason *SelectorError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type Setting struct {

	//
	// Indicates that this instance is a subtype of Setting.
	// Although this field is returned in the response, it is ignored on input
	// and cannot be selected. Specify xsi:type instead.
	//
	Setting_Type string `xml:"Setting.Type,omitempty" json:"Setting.Type,omitempty"`
}

type SettingError struct {
	*ApiError

	//
	// The setting error reason.
	//
	Reason *SettingError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type ShoppingSetting struct {
	*Setting

	//
	// ID of the Merchant Center account.
	// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
	//
	MerchantId int64 `xml:"merchantId,omitempty" json:"merchantId,omitempty"`

	//
	// Sales country of products to include in the campaign.
	// This field is required for Shopping campaigns. This field will default to 'ZZ' (and is the only
	// permitted value) for campaigns of type other than {@link AdvertisingChannelType#SHOPPING}.
	//
	SalesCountry string `xml:"salesCountry,omitempty" json:"salesCountry,omitempty"`

	//
	// Priority of the campaign. Campaigns with numerically higher priorities take precedence over
	// those with lower priorities. This field is required and should not be null. This field is not
	// required for Smart Shopping campaigns.
	// <span class="constraint InRange">This field must be between 0 and 2, inclusive.</span>
	//
	CampaignPriority int32 `xml:"campaignPriority,omitempty" json:"campaignPriority,omitempty"`

	//
	// Whether to include local products.
	//
	EnableLocal bool `xml:"enableLocal,omitempty" json:"enableLocal,omitempty"`
}

type SizeLimitError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *SizeLimitError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type SoapHeader struct {
	XMLName xml.Name `xml:"https://adwords.google.com/api/adwords/cm/v201809 RequestHeader"`

	//
	// The header identifies the customer id of the client of the AdWords manager, if an AdWords
	// manager is acting on behalf of their client or the customer id of the advertiser managing their
	// own account.
	//
	ClientCustomerId string `xml:"clientCustomerId,omitempty" json:"clientCustomerId,omitempty"`

	//
	// Developer token to identify that the person making the call has enough
	// quota.
	//
	DeveloperToken string `xml:"developerToken,omitempty" json:"developerToken,omitempty"`

	//
	// UserAgent is used to track distribution of API client programs and
	// application usage. The client is responsible for putting in a meaningful
	// value for tracking purposes. To be clear this is not the same as an HTTP
	// user agent.
	//
	UserAgent string `xml:"userAgent,omitempty" json:"userAgent,omitempty"`

	//
	// Used to validate the request without executing it.
	//
	ValidateOnly bool `xml:"validateOnly,omitempty" json:"validateOnly,omitempty"`

	//
	// If true, API will try to commit as many error free operations as possible and
	// report the other operations' errors.
	//
	// <p>Ignored for non-mutate calls.
	//
	PartialFailure bool `xml:"partialFailure,omitempty" json:"partialFailure,omitempty"`
}

type SoapResponseHeader struct {
	XMLName xml.Name `xml:"https://adwords.google.com/api/adwords/cm/v201809 ResponseHeader"`

	//
	// Unique id that identifies this request. If developers have any support issues, sending us
	// this id will enable us to find their request more easily.
	//
	RequestId string `xml:"requestId,omitempty" json:"requestId,omitempty"`

	//
	// The name of the service being invoked.
	//
	ServiceName string `xml:"serviceName,omitempty" json:"serviceName,omitempty"`

	//
	// The name of the method being invoked.
	//
	MethodName string `xml:"methodName,omitempty" json:"methodName,omitempty"`

	//
	// Number of operations performed for this SOAP request.
	//
	Operations int64 `xml:"operations,omitempty" json:"operations,omitempty"`

	//
	// Elapsed time in milliseconds between the AdWords API receiving the request and sending the
	// response.
	//
	ResponseTime int64 `xml:"responseTime,omitempty" json:"responseTime,omitempty"`
}

type StatsQueryError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *StatsQueryError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type StringFormatError struct {
	*ApiError

	Reason *StringFormatError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type StringLengthError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *StringLengthError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type String_StringMapEntry struct {
	Key string `xml:"key,omitempty" json:"key,omitempty"`

	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type TargetCpaBiddingScheme struct {
	*BiddingScheme

	//
	// Average cost per acquisition (CPA) target. This target should be greater than or equal to
	// minimum billable unit based on the currency for the account.
	// <span class="constraint Selectable">This field can be selected using the value "TargetCpa".</span>
	// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
	//
	TargetCpa *Money `xml:"targetCpa,omitempty" json:"targetCpa,omitempty"`

	//
	// Maximum cpc bid limit that applies to all keywords managed by the strategy.
	// <span class="constraint Selectable">This field can be selected using the value "TargetCpaMaxCpcBidCeiling".</span><span class="constraint Filterable">This field can be filtered on.</span>
	// <span class="constraint InRange">This field must be greater than or equal to 0.</span>
	//
	MaxCpcBidCeiling *Money `xml:"maxCpcBidCeiling,omitempty" json:"maxCpcBidCeiling,omitempty"`

	//
	// Minimum cpc bid limit that applies to all keywords managed by the strategy.
	// <span class="constraint Selectable">This field can be selected using the value "TargetCpaMaxCpcBidFloor".</span><span class="constraint Filterable">This field can be filtered on.</span>
	// <span class="constraint InRange">This field must be greater than or equal to 0.</span>
	//
	MaxCpcBidFloor *Money `xml:"maxCpcBidFloor,omitempty" json:"maxCpcBidFloor,omitempty"`
}

type TargetOutrankShareBiddingScheme struct {
	*BiddingScheme

	//
	// Specifies the target fraction (in micros) of auctions where the advertiser should outrank the
	// competitor. The advertiser outranks the competitor in an auction if either the advertiser
	// appears above the competitor in the search results, or appears in the search results when the
	// competitor does not.
	// <span class="constraint InRange">This field must be between 1 and 1000000, inclusive.</span>
	//
	TargetOutrankShare int32 `xml:"targetOutrankShare,omitempty" json:"targetOutrankShare,omitempty"`

	//
	// Competitor's visible domain URL.
	//
	CompetitorDomain string `xml:"competitorDomain,omitempty" json:"competitorDomain,omitempty"`

	//
	// Ceiling on max CPC bids.
	//
	MaxCpcBidCeiling *Money `xml:"maxCpcBidCeiling,omitempty" json:"maxCpcBidCeiling,omitempty"`

	//
	// Controls whether the strategy always follows bid estimate changes, or only increases. If false,
	// always sets a keyword's new bid to the estimate that will meet the target. If true, only
	// updates a keyword's bid if the current bid estimate is greater than the current bid.
	//
	BidChangesForRaisesOnly bool `xml:"bidChangesForRaisesOnly,omitempty" json:"bidChangesForRaisesOnly,omitempty"`

	//
	// Controls whether the strategy is allowed to raise bids on keywords with lower-range quality
	// scores.
	//
	RaiseBidWhenLowQualityScore bool `xml:"raiseBidWhenLowQualityScore,omitempty" json:"raiseBidWhenLowQualityScore,omitempty"`
}

type TargetingSettingDetail struct {

	//
	// The criterion type group that these settings apply to.
	// <span class="constraint Required">This field is required and should not be {@code null}.</span>
	//
	CriterionTypeGroup *CriterionTypeGroup `xml:"criterionTypeGroup,omitempty" json:"criterionTypeGroup,omitempty"`

	//
	// If true, criteria of this type can be used to modify bidding but will not restrict targeting
	// of ads. This is equivalent to "Bid only" in the AdWords user interface.
	// If false, restricts your ads to showing only for the criteria you have selected for this
	// CriterionTypeGroup. This is equivalent to "Target and Bid" in the AdWords user interface.
	// The default setting for a CriterionTypeGroup is false ("Target and Bid").
	// <span class="constraint Required">This field is required and should not be {@code null}.</span>
	//
	TargetAll bool `xml:"targetAll,omitempty" json:"targetAll,omitempty"`
}

type TargetRoasBiddingScheme struct {
	*BiddingScheme

	//
	// The target return on average spend (ROAS).
	// <span class="constraint Selectable">This field can be selected using the value "TargetRoas".</span>
	// <span class="constraint InRange">This field must be between 0.01 and 1000.0, inclusive.</span>
	// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
	//
	TargetRoas float64 `xml:"targetRoas,omitempty" json:"targetRoas,omitempty"`

	//
	// Maximum bid limit that applies to all keywords managed by the strategy.
	// <span class="constraint Selectable">This field can be selected using the value "TargetRoasBidCeiling".</span>
	// <span class="constraint InRange">This field must be greater than or equal to 0.</span>
	//
	BidCeiling *Money `xml:"bidCeiling,omitempty" json:"bidCeiling,omitempty"`

	//
	// Minimum bid limit that applies to all keywords managed by the strategy.
	// <span class="constraint Selectable">This field can be selected using the value "TargetRoasBidFloor".</span>
	// <span class="constraint InRange">This field must be greater than or equal to 0.</span>
	//
	BidFloor *Money `xml:"bidFloor,omitempty" json:"bidFloor,omitempty"`
}

type TargetSpendBiddingScheme struct {
	*BiddingScheme

	//
	// The largest max CPC bid that can be set by the TargetSpend bidder.
	// <span class="constraint Selectable">This field can be selected using the value "TargetSpendBidCeiling".</span>
	// <span class="constraint InRange">This field must be greater than or equal to 0.</span>
	//
	BidCeiling *Money `xml:"bidCeiling,omitempty" json:"bidCeiling,omitempty"`

	//
	// A spend target under which to maximize clicks. The TargetSpend bidder will
	// attempt to spend the smaller of this value or the natural throttling spend
	// amount. If not specified, the budget is used as the spend target.
	// <span class="constraint Selectable">This field can be selected using the value "TargetSpendSpendTarget".</span>
	// <span class="constraint InRange">This field must be greater than or equal to 0.</span>
	//
	SpendTarget *Money `xml:"spendTarget,omitempty" json:"spendTarget,omitempty"`
}

type TargetingSetting struct {
	*Setting

	//
	// The list of per-criterion-type-group targeting settings.
	//
	Details []*TargetingSettingDetail `xml:"details,omitempty" json:"details,omitempty"`
}

type TrackingSetting struct {
	*Setting

	//
	// The url used for dynamic tracking.  For more information, see the
	// article <a href="https://support.google.com/adwords/answer/2549100">
	// Use dynamic tracking URLs</a>.
	// Specify "NONE" to clear existing url.
	// <span class="constraint StringLength">This string must not be empty.</span>
	//
	TrackingUrl string `xml:"trackingUrl,omitempty" json:"trackingUrl,omitempty"`
}

type UniversalAppCampaignAdsPolicyDecisions struct {

	//
	// Used to identify assets that are associated with the Ads Policy decisions.
	//
	UniversalAppCampaignAsset *UniversalAppCampaignAsset `xml:"universalAppCampaignAsset,omitempty" json:"universalAppCampaignAsset,omitempty"`

	//
	// Unique identifier, which when combined with the UniversalAppCampaignAsset, can be used to
	// uniquely identify the exact asset.
	//
	// <p>For example, in the case of {@link UniversalAppCampaignAsset}.VIDEO - the id could be used
	// to identify the individual video.
	//
	AssetId string `xml:"assetId,omitempty" json:"assetId,omitempty"`

	//
	// List of policy decisions associated with the asset(s).
	//
	PolicyTopicEntries []*PolicyTopicEntry `xml:"policyTopicEntries,omitempty" json:"policyTopicEntries,omitempty"`
}

type UniversalAppCampaignInfo struct {

	//
	// Represents the goal which the bidding strategy of this app campaign should optimize towards.
	// <span class="constraint Selectable">This field can be selected using the value "BiddingStrategyGoalType".</span><span class="constraint Filterable">This field can be filtered on.</span>
	// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
	//
	BiddingStrategyGoalType *UniversalAppBiddingStrategyGoalType `xml:"biddingStrategyGoalType,omitempty" json:"biddingStrategyGoalType,omitempty"`

	//
	// A string that uniquely identifies a mobile application.
	// <span class="constraint Selectable">This field can be selected using the value "AppId".</span><span class="constraint Filterable">This field can be filtered on.</span>
	// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
	//
	AppId string `xml:"appId,omitempty" json:"appId,omitempty"`

	//
	// The vendor, i.e. application store that distributes this specific app.
	// <span class="constraint Selectable">This field can be selected using the value "AppVendor".</span><span class="constraint Filterable">This field can be filtered on.</span>
	// <span class="constraint Required">This field is required and should not be {@code null} when it is contained within {@link Operator}s : ADD.</span>
	//
	AppVendor *MobileApplicationVendor `xml:"appVendor,omitempty" json:"appVendor,omitempty"`
}

type UrlError struct {
	*ApiError

	//
	// The error reason represented by an enum.
	//
	Reason *UrlError_Reason `xml:"reason,omitempty" json:"reason,omitempty"`
}

type VanityPharma struct {

	//
	// The display mode for vanity pharma URLs.
	// <span class="constraint Selectable">This field can be selected using the value "VanityPharmaDisplayUrlMode".</span><span class="constraint Filterable">This field can be filtered on.</span>
	//
	VanityPharmaDisplayUrlMode *VanityPharmaDisplayUrlMode `xml:"vanityPharmaDisplayUrlMode,omitempty" json:"vanityPharmaDisplayUrlMode,omitempty"`

	//
	// The text that will be displayed in display URL of the text ad when website description
	// is the selected display mode for vanity pharma URLs.
	// <span class="constraint Selectable">This field can be selected using the value "VanityPharmaText".</span><span class="constraint Filterable">This field can be filtered on.</span>
	//
	VanityPharmaText *VanityPharmaText `xml:"vanityPharmaText,omitempty" json:"vanityPharmaText,omitempty"`
}

type CampaignServiceInterface interface {

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Returns the list of campaigns that meet the selector criteria.

	   @param serviceSelector the selector specifying the {@link Campaign}s to return.
	   @return A list of campaigns.
	   @throws ApiException if problems occurred while fetching campaign information.
	*/
	Get(request *Get) (*GetResponse, error)

	GetContext(ctx context.Context, request *Get) (*GetResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Adds, updates, or removes campaigns.
	   <p class="note"><b>Note:</b> {@link CampaignOperation} does not support the
	   <code>REMOVE</code> operator. To remove a campaign, set its
	   {@link Campaign#status status} to {@code REMOVED}.</p>
	   @param operations A list of unique operations.
	   The same campaign cannot be specified in more than one operation.
	   @return The list of updated campaigns, returned in the same order as the
	   <code>operations</code> array.
	   @throws ApiException if problems occurred while updating campaign information.
	*/
	Mutate(request *Mutate) (*MutateResponse, error)

	MutateContext(ctx context.Context, request *Mutate) (*MutateResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Adds labels to the {@linkplain Campaign campaign} or removes {@linkplain Label label}s from the
	   {@linkplain Campaign campaign}.
	   <p>Add - Apply an existing label to an existing {@linkplain Campaign campaign}. The
	   {@code campaignId} must reference an existing {@linkplain Campaign}. The {@code labelId} must
	   reference an existing {@linkplain Label label}.
	   <p>Remove - Removes the link between the specified {@linkplain Campaign campaign} and
	   {@linkplain Label label}.

	   @param operations the operations to apply.
	   @return a list of {@linkplain CampaignLabel}s where each entry in the list is the result of
	   applying the operation in the input list with the same index. For an
	   add operation, the returned CampaignLabel contains the CampaignId and the LabelId.
	   In the case of a remove operation, the returned CampaignLabel will only have CampaignId.
	   @throws ApiException when there are one or more errors with the request.
	*/
	MutateLabel(request *MutateLabel) (*MutateLabelResponse, error)

	MutateLabelContext(ctx context.Context, request *MutateLabel) (*MutateLabelResponse, error)

	// Error can be either of the following types:
	//
	//   - ApiException
	/*
	   Returns the list of campaigns that match the query.

	   @param query The SQL-like AWQL query string.
	   @return A list of campaigns.
	   @throws ApiException if problems occur while parsing the query or fetching campaign
	   information.
	*/
	Query(request *Query) (*QueryResponse, error)

	QueryContext(ctx context.Context, request *Query) (*QueryResponse, error)
}

type campaignServiceInterface struct {
	client *soap.Client
}

func NewCampaignServiceInterface(client *soap.Client) CampaignServiceInterface {
	return &campaignServiceInterface{
		client: client,
	}
}

func (service *campaignServiceInterface) GetContext(ctx context.Context, request *Get) (*GetResponse, error) {
	response := new(GetResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *campaignServiceInterface) Get(request *Get) (*GetResponse, error) {
	return service.GetContext(
		context.Background(),
		request,
	)
}

func (service *campaignServiceInterface) MutateContext(ctx context.Context, request *Mutate) (*MutateResponse, error) {
	response := new(MutateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *campaignServiceInterface) Mutate(request *Mutate) (*MutateResponse, error) {
	return service.MutateContext(
		context.Background(),
		request,
	)
}

func (service *campaignServiceInterface) MutateLabelContext(ctx context.Context, request *MutateLabel) (*MutateLabelResponse, error) {
	response := new(MutateLabelResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *campaignServiceInterface) MutateLabel(request *MutateLabel) (*MutateLabelResponse, error) {
	return service.MutateLabelContext(
		context.Background(),
		request,
	)
}

func (service *campaignServiceInterface) QueryContext(ctx context.Context, request *Query) (*QueryResponse, error) {
	response := new(QueryResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *campaignServiceInterface) Query(request *Query) (*QueryResponse, error) {
	return service.QueryContext(
		context.Background(),
		request,
	)
}
